Return-Path: <qemu-devel-bounces+lists+qemu-devel=lfdr.de@nongnu.org>
X-Original-To: lists+qemu-devel@lfdr.de
Delivered-To: lists+qemu-devel@lfdr.de
Received: from lists.gnu.org (lists.gnu.org [209.51.188.17])
	by mail.lfdr.de (Postfix) with ESMTPS id 1E8834216D2
	for <lists+qemu-devel@lfdr.de>; Mon,  4 Oct 2021 20:54:06 +0200 (CEST)
Received: from localhost ([::1]:41590 helo=lists1p.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.90_1)
	(envelope-from <qemu-devel-bounces+lists+qemu-devel=lfdr.de@nongnu.org>)
	id 1mXT6C-0000zV-OA
	for lists+qemu-devel@lfdr.de; Mon, 04 Oct 2021 14:54:04 -0400
Received: from eggs.gnu.org ([2001:470:142:3::10]:57860)
 by lists.gnu.org with esmtps (TLS1.2:ECDHE_RSA_AES_256_GCM_SHA384:256)
 (Exim 4.90_1) (envelope-from <mark.cave-ayland@ilande.co.uk>)
 id 1mXT56-00084A-02
 for qemu-devel@nongnu.org; Mon, 04 Oct 2021 14:52:56 -0400
Received: from mail.ilande.co.uk ([2001:41c9:1:41f::167]:35672
 helo=mail.default.ilande.bv.iomart.io)
 by eggs.gnu.org with esmtps (TLS1.2:ECDHE_RSA_AES_256_GCM_SHA384:256)
 (Exim 4.90_1) (envelope-from <mark.cave-ayland@ilande.co.uk>)
 id 1mXT53-0002EZ-UU
 for qemu-devel@nongnu.org; Mon, 04 Oct 2021 14:52:55 -0400
Received: from [2a00:23c4:8b9d:4100:5d98:71b5:90ca:dad1]
 by mail.default.ilande.bv.iomart.io with esmtpsa
 (TLS1.3:ECDHE_RSA_AES_128_GCM_SHA256:128) (Exim 4.92)
 (envelope-from <mark.cave-ayland@ilande.co.uk>)
 id 1mXT4o-0007uO-Gu; Mon, 04 Oct 2021 19:52:42 +0100
To: Laurent Vivier <laurent@vivier.eu>, qemu-devel@nongnu.org
References: <20211002110007.30825-1-mark.cave-ayland@ilande.co.uk>
 <20211002110007.30825-12-mark.cave-ayland@ilande.co.uk>
 <94532455-2a7b-8ad2-1b6f-a6c4fc9d971f@vivier.eu>
From: Mark Cave-Ayland <mark.cave-ayland@ilande.co.uk>
Message-ID: <e7b63f9c-5c20-a26a-48f8-e1f3bfbc0353@ilande.co.uk>
Date: Mon, 4 Oct 2021 19:52:44 +0100
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:78.0) Gecko/20100101
 Thunderbird/78.14.0
MIME-Version: 1.0
In-Reply-To: <94532455-2a7b-8ad2-1b6f-a6c4fc9d971f@vivier.eu>
Content-Type: text/plain; charset=utf-8; format=flowed
Content-Language: en-US
Content-Transfer-Encoding: 8bit
X-SA-Exim-Connect-IP: 2a00:23c4:8b9d:4100:5d98:71b5:90ca:dad1
X-SA-Exim-Mail-From: mark.cave-ayland@ilande.co.uk
Subject: Re: [PATCH 11/12] macfb: add vertical blank interrupt
X-SA-Exim-Version: 4.2.1 (built Wed, 08 May 2019 21:11:16 +0000)
X-SA-Exim-Scanned: Yes (on mail.default.ilande.bv.iomart.io)
Received-SPF: pass client-ip=2001:41c9:1:41f::167;
 envelope-from=mark.cave-ayland@ilande.co.uk;
 helo=mail.default.ilande.bv.iomart.io
X-Spam_score_int: -18
X-Spam_score: -1.9
X-Spam_bar: -
X-Spam_report: (-1.9 / 5.0 requ) BAYES_00=-1.9, NICE_REPLY_A=-0.001,
 SPF_HELO_NONE=0.001, SPF_PASS=-0.001 autolearn=ham autolearn_force=no
X-Spam_action: no action
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.23
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
 <mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <https://lists.nongnu.org/archive/html/qemu-devel>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
 <mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Errors-To: qemu-devel-bounces+lists+qemu-devel=lfdr.de@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+lists+qemu-devel=lfdr.de@nongnu.org>

On 04/10/2021 17:32, Laurent Vivier wrote:

> Le 02/10/2021 à 13:00, Mark Cave-Ayland a écrit :
>> The MacOS driver expects a 60.15Hz vertical blank interrupt to be generated by
>> the framebuffer which in turn schedules the mouse driver via the Vertical Retrace
>> Manager.
>>
>> Signed-off-by: Mark Cave-Ayland <mark.cave-ayland@ilande.co.uk>
>> ---
>>   hw/display/macfb.c         | 81 ++++++++++++++++++++++++++++++++++++++
>>   include/hw/display/macfb.h |  8 ++++
>>   2 files changed, 89 insertions(+)
>>
>> diff --git a/hw/display/macfb.c b/hw/display/macfb.c
>> index 29f6ad8eba..60a203e67b 100644
>> --- a/hw/display/macfb.c
>> +++ b/hw/display/macfb.c
>> @@ -33,9 +33,16 @@
>>   #define DAFB_MODE_CTRL1     0x8
>>   #define DAFB_MODE_CTRL2     0xc
>>   #define DAFB_MODE_SENSE     0x1c
>> +#define DAFB_INTR_MASK      0x104
>> +#define DAFB_INTR_STAT      0x108
>> +#define DAFB_INTR_CLEAR     0x10c
>>   #define DAFB_RESET          0x200
>>   #define DAFB_LUT            0x213
>>   
>> +#define DAFB_INTR_VBL   0x4
>> +
>> +/* Vertical Blank period (60.15Hz) */
>> +#define DAFB_INTR_VBL_PERIOD_NS 16625800
>>   
>>   /*
>>    * Quadra sense codes taken from Apple Technical Note HW26:
>> @@ -449,6 +456,32 @@ static void macfb_update_display(void *opaque)
>>       macfb_draw_graphic(s);
>>   }
>>   
>> +static void macfb_update_irq(MacfbState *s)
>> +{
>> +    uint32_t irq_state = s->irq_state & s->irq_mask;
>> +
>> +    if (irq_state) {
>> +        qemu_irq_raise(s->irq);
>> +    } else {
>> +        qemu_irq_lower(s->irq);
>> +    }
>> +}
>> +
>> +static void macfb_vbl_timer(void *opaque)
>> +{
>> +    MacfbState *s = opaque;
>> +    int64_t next_vbl;
>> +
>> +    s->irq_state |= DAFB_INTR_VBL;
>> +    macfb_update_irq(s);
>> +
>> +    /* 60 Hz irq */
>> +    next_vbl = (qemu_clock_get_ns(QEMU_CLOCK_VIRTUAL) +
>> +                DAFB_INTR_VBL_PERIOD_NS) /
>> +                DAFB_INTR_VBL_PERIOD_NS * DAFB_INTR_VBL_PERIOD_NS;
>> +    timer_mod(s->vbl_timer, next_vbl);
> 
> perhaps you can move this to a function and call it here and below?

I'd like to keep the timer_mod() outside of the function but I agree it is nicer to 
keep the next_vbl logci in a single place.

>> +}
>> +
>>   static void macfb_reset(MacfbState *s)
>>   {
>>       int i;
>> @@ -477,6 +510,9 @@ static uint64_t macfb_ctrl_read(void *opaque,
>>       case DAFB_MODE_CTRL2:
>>           val = s->regs[addr >> 2];
>>           break;
>> +    case DAFB_INTR_STAT:
>> +        val = s->irq_state;
>> +        break;
>>       case DAFB_MODE_SENSE:
>>           val = macfb_sense_read(s);
>>           break;
>> @@ -492,6 +528,8 @@ static void macfb_ctrl_write(void *opaque,
>>                                unsigned int size)
>>   {
>>       MacfbState *s = opaque;
>> +    int64_t next_vbl;
>> +
>>       switch (addr) {
>>       case DAFB_MODE_VADDR1:
>>       case DAFB_MODE_VADDR2:
>> @@ -507,8 +545,25 @@ static void macfb_ctrl_write(void *opaque,
>>       case DAFB_MODE_SENSE:
>>           macfb_sense_write(s, val);
>>           break;
>> +    case DAFB_INTR_MASK:
>> +        s->irq_mask = val;
>> +        if (val & DAFB_INTR_VBL) {
>> +            next_vbl = (qemu_clock_get_ns(QEMU_CLOCK_VIRTUAL) +
>> +                        DAFB_INTR_VBL_PERIOD_NS) /
>> +                        DAFB_INTR_VBL_PERIOD_NS * DAFB_INTR_VBL_PERIOD_NS;
>> +            timer_mod(s->vbl_timer, next_vbl);
>> +        } else {
>> +            timer_del(s->vbl_timer);
>> +        }
>> +        break;
>> +    case DAFB_INTR_CLEAR:
>> +        s->irq_state &= ~DAFB_INTR_VBL;
>> +        macfb_update_irq(s);
>> +        break;
>>       case DAFB_RESET:
>>           s->palette_current = 0;
>> +        s->irq_state &= ~DAFB_INTR_VBL;
>> +        macfb_update_irq(s);
>>           break;
>>       case DAFB_LUT:
>>           s->color_palette[s->palette_current++] = val;
>> @@ -586,6 +641,7 @@ static void macfb_common_realize(DeviceState *dev, MacfbState *s, Error **errp)
>>       s->vram_bit_mask = MACFB_VRAM_SIZE - 1;
>>       memory_region_set_coalescing(&s->mem_vram);
>>   
>> +    s->vbl_timer = timer_new_ns(QEMU_CLOCK_VIRTUAL, macfb_vbl_timer, s);
>>       macfb_update_mode(s);
>>   }
>>   
>> @@ -601,6 +657,16 @@ static void macfb_sysbus_realize(DeviceState *dev, Error **errp)
>>   
>>       sysbus_init_mmio(SYS_BUS_DEVICE(s), &ms->mem_ctrl);
>>       sysbus_init_mmio(SYS_BUS_DEVICE(s), &ms->mem_vram);
>> +
>> +    qdev_init_gpio_out(dev, &ms->irq, 1);
>> +}
>> +
>> +static void macfb_nubus_set_irq(void *opaque, int n, int level)
>> +{
>> +    MacfbNubusState *s = NUBUS_MACFB(opaque);
>> +    NubusDevice *nd = NUBUS_DEVICE(s);
>> +
>> +    nubus_set_irq(nd, level);
>>   }
>>   
>>   static void macfb_nubus_realize(DeviceState *dev, Error **errp)
>> @@ -622,6 +688,19 @@ static void macfb_nubus_realize(DeviceState *dev, Error **errp)
>>   
>>       memory_region_add_subregion(&nd->slot_mem, DAFB_BASE, &ms->mem_ctrl);
>>       memory_region_add_subregion(&nd->slot_mem, VIDEO_BASE, &ms->mem_vram);
>> +
>> +    ms->irq = qemu_allocate_irq(macfb_nubus_set_irq, s, 0);
>> +}
>> +
>> +static void macfb_nubus_unrealize(DeviceState *dev)
>> +{
>> +    MacfbNubusState *s = NUBUS_MACFB(dev);
>> +    MacfbNubusDeviceClass *ndc = NUBUS_MACFB_GET_CLASS(dev);
>> +    MacfbState *ms = &s->macfb;
>> +
>> +    ndc->parent_unrealize(dev);
>> +
>> +    qemu_free_irq(ms->irq);
>>   }
>>   
>>   static void macfb_sysbus_reset(DeviceState *d)
>> @@ -672,6 +751,8 @@ static void macfb_nubus_class_init(ObjectClass *klass, void *data)
>>   
>>       device_class_set_parent_realize(dc, macfb_nubus_realize,
>>                                       &ndc->parent_realize);
>> +    device_class_set_parent_unrealize(dc, macfb_nubus_unrealize,
>> +                                      &ndc->parent_unrealize);
>>       dc->desc = "Nubus Macintosh framebuffer";
>>       dc->reset = macfb_nubus_reset;
>>       dc->vmsd = &vmstate_macfb;
>> diff --git a/include/hw/display/macfb.h b/include/hw/display/macfb.h
>> index 0aff0d84d2..e52775aa21 100644
>> --- a/include/hw/display/macfb.h
>> +++ b/include/hw/display/macfb.h
>> @@ -14,7 +14,9 @@
>>   #define MACFB_H
>>   
>>   #include "exec/memory.h"
>> +#include "hw/irq.h"
>>   #include "ui/console.h"
>> +#include "qemu/timer.h"
>>   #include "qom/object.h"
>>   
>>   typedef enum  {
>> @@ -63,6 +65,11 @@ typedef struct MacfbState {
>>   
>>       uint32_t regs[MACFB_NUM_REGS];
>>       MacFbMode *mode;
>> +
>> +    uint32_t irq_state;
>> +    uint32_t irq_mask;
>> +    QEMUTimer *vbl_timer;
>> +    qemu_irq irq;
>>   } MacfbState;
>>   
>>   #define TYPE_MACFB "sysbus-macfb"
>> @@ -81,6 +88,7 @@ struct MacfbNubusDeviceClass {
>>       DeviceClass parent_class;
>>   
>>       DeviceRealize parent_realize;
>> +    DeviceUnrealize parent_unrealize;
>>   };
>>   
>>   
>>
> 
> Reviewed-by: Laurent Vivier <laurent@vivier.eu>

ATB,

Mark.

