Return-Path: <qemu-devel-bounces+lists+qemu-devel=lfdr.de@nongnu.org>
X-Original-To: lists+qemu-devel@lfdr.de
Delivered-To: lists+qemu-devel@lfdr.de
Received: from lists.gnu.org (lists.gnu.org [209.51.188.17])
	by mail.lfdr.de (Postfix) with ESMTPS id 5434D18766E
	for <lists+qemu-devel@lfdr.de>; Tue, 17 Mar 2020 00:59:07 +0100 (CET)
Received: from localhost ([::1]:50514 helo=lists1p.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.90_1)
	(envelope-from <qemu-devel-bounces+lists+qemu-devel=lfdr.de@nongnu.org>)
	id 1jDzdS-00031G-4j
	for lists+qemu-devel@lfdr.de; Mon, 16 Mar 2020 19:59:06 -0400
Received: from eggs.gnu.org ([2001:470:142:3::10]:51699)
 by lists.gnu.org with esmtp (Exim 4.90_1)
 (envelope-from <no-reply@patchew.org>) id 1jDzcg-0002UV-OY
 for qemu-devel@nongnu.org; Mon, 16 Mar 2020 19:58:20 -0400
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
 (envelope-from <no-reply@patchew.org>) id 1jDzca-0005ff-Hl
 for qemu-devel@nongnu.org; Mon, 16 Mar 2020 19:58:18 -0400
Resent-Date: Mon, 16 Mar 2020 19:58:18 -0400
Resent-Message-Id: <E1jDzca-0005ff-Hl@eggs.gnu.org>
Received: from sender4-of-o51.zoho.com ([136.143.188.51]:21137)
 by eggs.gnu.org with esmtps (TLS1.0:RSA_AES_256_CBC_SHA1:32)
 (Exim 4.71) (envelope-from <no-reply@patchew.org>)
 id 1jDzca-0005VM-57
 for qemu-devel@nongnu.org; Mon, 16 Mar 2020 19:58:12 -0400
ARC-Seal: i=1; a=rsa-sha256; t=1584403087; cv=none; 
 d=zohomail.com; s=zohoarc; 
 b=kQyoO1HgRExopU6PGRbD9/W4V7Cr7OkByY6vXuYm/PHErUH6Dy4NBpqrbkBK3Ljh+zblhbn3tJHKOXxf7HeMrbwZD/rDzk2ci5FrN62Um7I06AF9TvrMbWW17TW9/O5iCj4J9D3TSRPE8PMk34+aRR6iWWQUfkMCadIxfQPXM10=
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=zohomail.com;
 s=zohoarc; t=1584403087;
 h=Content-Type:Content-Transfer-Encoding:Cc:Date:From:In-Reply-To:MIME-Version:Message-ID:Reply-To:Subject:To;
 bh=PQemyuIA5qUXIHCPPGtqDNoNRU2B7ehi7sURRA/u1kk=; 
 b=HEpE9agmQCHBZ1TORSS6/xcT0pKC8+q5Obt64n+bNDYX50unNN1/roSYaiLOVbGcRnQGpBbDY5AO/6RDONhzY4THR5ZWic0jX6idntuCq8KHKEIh3aGbuMvVLbgOHv4GcB82A4c7ioNZFYVF14tvtKYpQ7wisLKjhUdTy3cqWzM=
ARC-Authentication-Results: i=1; mx.zohomail.com;
 spf=pass  smtp.mailfrom=no-reply@patchew.org;
 dmarc=pass header.from=<no-reply@patchew.org>
 header.from=<no-reply@patchew.org>
Received: from [172.17.0.3] (23.253.156.214 [23.253.156.214]) by
 mx.zohomail.com with SMTPS id 1584403086182482.3761241389311;
 Mon, 16 Mar 2020 16:58:06 -0700 (PDT)
In-Reply-To: <1584394048-44994-1-git-send-email-pbonzini@redhat.com>
Subject: Re: [PULL 00/61] Misc patches for soft freeze
Message-ID: <158440308521.17104.11084750357691459202@39012742ff91>
MIME-Version: 1.0
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: base64
Resent-From: 
From: no-reply@patchew.org
To: pbonzini@redhat.com
Date: Mon, 16 Mar 2020 16:58:06 -0700 (PDT)
X-ZohoMailClient: External
X-detected-operating-system: by eggs.gnu.org: GNU/Linux 2.2.x-3.x [generic]
 [fuzzy]
X-Received-From: 136.143.188.51
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.23
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
 <mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <https://lists.nongnu.org/archive/html/qemu-devel>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
 <mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Reply-To: qemu-devel@nongnu.org
Cc: qemu-devel@nongnu.org
Errors-To: qemu-devel-bounces+lists+qemu-devel=lfdr.de@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+lists+qemu-devel=lfdr.de@nongnu.org>

UGF0Y2hldyBVUkw6IGh0dHBzOi8vcGF0Y2hldy5vcmcvUUVNVS8xNTg0Mzk0MDQ4LTQ0OTk0LTEt
Z2l0LXNlbmQtZW1haWwtcGJvbnppbmlAcmVkaGF0LmNvbS8KCgoKSGksCgpUaGlzIHNlcmllcyBz
ZWVtcyB0byBoYXZlIHNvbWUgY29kaW5nIHN0eWxlIHByb2JsZW1zLiBTZWUgb3V0cHV0IGJlbG93
IGZvcgptb3JlIGluZm9ybWF0aW9uOgoKU3ViamVjdDogW1BVTEwgMDAvNjFdIE1pc2MgcGF0Y2hl
cyBmb3Igc29mdCBmcmVlemUKTWVzc2FnZS1pZDogMTU4NDM5NDA0OC00NDk5NC0xLWdpdC1zZW5k
LWVtYWlsLXBib256aW5pQHJlZGhhdC5jb20KVHlwZTogc2VyaWVzCgo9PT0gVEVTVCBTQ1JJUFQg
QkVHSU4gPT09CiMhL2Jpbi9iYXNoCmdpdCByZXYtcGFyc2UgYmFzZSA+IC9kZXYvbnVsbCB8fCBl
eGl0IDAKZ2l0IGNvbmZpZyAtLWxvY2FsIGRpZmYucmVuYW1lbGltaXQgMApnaXQgY29uZmlnIC0t
bG9jYWwgZGlmZi5yZW5hbWVzIFRydWUKZ2l0IGNvbmZpZyAtLWxvY2FsIGRpZmYuYWxnb3JpdGht
IGhpc3RvZ3JhbQouL3NjcmlwdHMvY2hlY2twYXRjaC5wbCAtLW1haWxiYWNrIGJhc2UuLgo9PT0g
VEVTVCBTQ1JJUFQgRU5EID09PQoKU3dpdGNoZWQgdG8gYSBuZXcgYnJhbmNoICd0ZXN0JwpjZDQ2
Y2MyIGh3L2FybTogTGV0IGRldmljZXMgb3duIHRoZSBNZW1vcnlSZWdpb24gdGhleSBjcmVhdGUK
YWNlZmQ0NyBody9hcm06IFJlbW92ZSB1bm5lY2Vzc2FyeSBtZW1vcnlfcmVnaW9uX3NldF9yZWFk
b25seSgpIG9uIFJPTSBhbGlhcwpmMjZjNmVjIGh3L3BwYy9wcGM0MDU6IFVzZSBtZW1vcnlfcmVn
aW9uX2luaXRfcm9tKCkgd2l0aCByZWFkLW9ubHkgcmVnaW9ucwowMTRhN2Y2IGh3L2FybS9zdG0z
MjogVXNlIG1lbW9yeV9yZWdpb25faW5pdF9yb20oKSB3aXRoIHJlYWQtb25seSByZWdpb25zCjM3
YjkzN2MgaHcvY2hhcjogTGV0IGRldmljZXMgb3duIHRoZSBNZW1vcnlSZWdpb24gdGhleSBjcmVh
dGUKNWZhYWVjOSBody9yaXNjdjogTGV0IGRldmljZXMgb3duIHRoZSBNZW1vcnlSZWdpb24gdGhl
eSBjcmVhdGUKMzJlODIxMCBody9kbWE6IExldCBkZXZpY2VzIG93biB0aGUgTWVtb3J5UmVnaW9u
IHRoZXkgY3JlYXRlCjQxYjA5NDkgaHcvZGlzcGxheTogTGV0IGRldmljZXMgb3duIHRoZSBNZW1v
cnlSZWdpb24gdGhleSBjcmVhdGUKMjQ0MGQzZCBody9jb3JlOiBMZXQgZGV2aWNlcyBvd24gdGhl
IE1lbW9yeVJlZ2lvbiB0aGV5IGNyZWF0ZQpjYmI0ODI2IHNjcmlwdHMvY29jY2k6IFBhdGNoIHRv
IGxldCBkZXZpY2VzIG93biB0aGVpciBNZW1vcnlSZWdpb25zCjc4Mzk3YTAgc2NyaXB0cy9jb2Nj
aTogUGF0Y2ggdG8gcmVtb3ZlIHVubmVjZXNzYXJ5IG1lbW9yeV9yZWdpb25fc2V0X3JlYWRvbmx5
KCkKNzEwNWYxMyBzY3JpcHRzL2NvY2NpOiBQYXRjaCB0byBkZXRlY3QgcG90ZW50aWFsIHVzZSBv
ZiBtZW1vcnlfcmVnaW9uX2luaXRfcm9tCjVlMjk2NTcgaHcvc3BhcmM6IFVzZSBtZW1vcnlfcmVn
aW9uX2luaXRfcm9tKCkgd2l0aCByZWFkLW9ubHkgcmVnaW9ucwozZWIyMjdhIGh3L3NoNDogVXNl
IG1lbW9yeV9yZWdpb25faW5pdF9yb20oKSB3aXRoIHJlYWQtb25seSByZWdpb25zCmViMDkzNDkg
aHcvcmlzY3Y6IFVzZSBtZW1vcnlfcmVnaW9uX2luaXRfcm9tKCkgd2l0aCByZWFkLW9ubHkgcmVn
aW9ucwplZDQ4MjZlIGh3L3BwYzogVXNlIG1lbW9yeV9yZWdpb25faW5pdF9yb20oKSB3aXRoIHJl
YWQtb25seSByZWdpb25zCmIxMDUzNjkgaHcvcGNpLWhvc3Q6IFVzZSBtZW1vcnlfcmVnaW9uX2lu
aXRfcm9tKCkgd2l0aCByZWFkLW9ubHkgcmVnaW9ucwphNjg1MDBmIGh3L25ldDogVXNlIG1lbW9y
eV9yZWdpb25faW5pdF9yb20oKSB3aXRoIHJlYWQtb25seSByZWdpb25zCmVkOWNkMWYgaHcvbTY4
azogVXNlIG1lbW9yeV9yZWdpb25faW5pdF9yb20oKSB3aXRoIHJlYWQtb25seSByZWdpb25zCjM5
OWJhMDYgaHcvZGlzcGxheTogVXNlIG1lbW9yeV9yZWdpb25faW5pdF9yb20oKSB3aXRoIHJlYWQt
b25seSByZWdpb25zCjUxZDc0NWIgaHcvYXJtOiBVc2UgbWVtb3J5X3JlZ2lvbl9pbml0X3JvbSgp
IHdpdGggcmVhZC1vbmx5IHJlZ2lvbnMKOTMzYTZjNSBzY3JpcHRzL2NvY2NpOiBQYXRjaCB0byBy
ZXBsYWNlIG1lbW9yeV9yZWdpb25faW5pdF97cmFtLCByZWFkb25seSAtPiByb219CjRmZWQ4NTUg
c2NyaXB0cy9jb2NjaTogUmVuYW1lIG1lbW9yeS1yZWdpb24te2luaXQtcmFtIC0+IGhvdXNla2Vl
cGluZ30KYWYyYTcxOSBtZW1vcnk6IFNpbXBsaWZ5IG1lbW9yeV9yZWdpb25faW5pdF9yb21fbm9t
aWdyYXRlKCkgdG8gZWFzZSByZXZpZXcKYWYxZThjYSBtZW1vcnk6IENvcnJlY3RseSByZXR1cm4g
YWxpYXMgcmVnaW9uIHR5cGUKNDIwMjcyYSBsb2NrYWJsZTogYWRkIFFlbXVSZWNNdXRleCBzdXBw
b3J0CjcxNDVkYTcgbG9ja2FibGU6IGFkZCBsb2NrIGd1YXJkcwo3NzNiNDM2IGNwdXM6IGF2b2lk
IHBhdXNlX2FsbF92Y3B1cyBnZXR0aW5nIHN0dWNrIGR1ZSB0byByYWNlCjNjNmQyNzcgZXhlYy9y
b21fcmVzZXQ6IEZyZWUgcm9tIGRhdGEgZHVyaW5nIGlubWlncmF0ZSBza2lwCjQ2Y2NhNDMgVXNl
IC1pc3lzdGVtIGZvciBsaW51eC1oZWFkZXJzIGRpcgo1ZTI4NDU1IHNvZnRtbXUvdmwuYzogSGFu
ZGxlICctY3B1IGhlbHAnIGFuZCAnLWRldmljZSBoZWxwJyBiZWZvcmUgJ25vIGRlZmF1bHQgbWFj
aGluZScKY2JlNmIwNCBxZW11LWNwdS1tb2RlbHMucnN0OiBEb2N1bWVudCAtbm9UU1gsIG1kcy1u
bywgdGFhLW5vLCBhbmQgdHN4LWN0cmwKZmRhNDAyZiB1aS9jdXJzZXM6IE1vdmUgYXJyYXlzIHRv
IC5oZWFwIHRvIHNhdmUgNzRLaUIgb2YgLmJzcwpkNTU3M2FjIHVpL2N1cnNlczogTWFrZSBjb250
cm9sX2NoYXJhY3RlcnNbXSBhcnJheSBjb25zdAo3YzNlNDlmIGh3L3VzYi9xdWlya3M6IFVzZSBz
bWFsbGVyIHR5cGVzIHRvIHJlZHVjZSAucm9kYXRhIGJ5IDEwS2lCCmM4Nzc4NGIgaHcvYXVkaW8v
aW50ZWwtaGRhOiBVc2UgbWVtb3J5IHJlZ2lvbiBhbGlhcyB0byByZWR1Y2UgLnJvZGF0YSBieSA0
LjM0TUIKY2MyMWI4NyBody9hdWRpby9mbW9wbDogTW92ZSBFTlZfQ1VSVkUgdG8gLmhlYXAgdG8g
c2F2ZSAzMktpQiBvZiAuYnNzCmExZWExZDUgTWFrZWZpbGU6IExldCB0aGUgJ2hlbHAnIHRhcmdl
dCBsaXN0IHRoZSB0b29scyB0YXJnZXRzCjlhYzI5N2EgTWFrZWZpbGU6IEFsaWduICdoZWxwJyB0
YXJnZXQgb3V0cHV0CmIzMjE5ZTUgV0hQWDogVXNlIHByb3BlciBzeW5jaHJvbml6YXRpb24gcHJp
bWl0aXZlcyB3aGlsZSBwcm9jZXNzaW5nCjdmZWViMzMgaTM4NjogRml4IEdDQyB3YXJuaW5nIHdp
dGggc25wcmludGYgd2hlbiBIQVggaXMgZW5hYmxlZAoxZWE4ODc1IHFvbS9vYmplY3Q6IFVzZSBj
b21tb24gZ2V0L3NldCB1aW50IGhlbHBlcnMKN2U3Y2U0OCBpY2g5OiBTaW1wbGlmeSBpY2g5X2xw
Y19pbml0Zm4KYTVjYWE4NiBpY2g5OiBmaXggZ2V0dGVyIHR5cGUgZm9yIHNjaV9pbnQgcHJvcGVy
dHkKNjU2OTJjNiBxb20vb2JqZWN0OiBlbmFibGUgc2V0dGVyIGZvciB1aW50IHR5cGVzCmY3OGE4
YjAgbWVtb3J5OiBGaXggc3RhcnQgb2Zmc2V0IGZvciBiaXRtYXAgbG9nX2NsZWFyIGhvb2sKYmJi
MGQwMyB0ZXN0cy9kb2NrZXI6IEluc3RhbGwgU0FTTCBsaWJyYXJ5IHRvIGV4dGVuZCBjb2RlIGNv
dmVyYWdlIG9uIGFtZDY0CjBiNDQwNjIgY29uZmlndXJlOiBGaXggYnVpbGRpbmcgd2l0aCBTQVNM
IG9uIFdpbmRvd3MKNTkzMzdjMCBtb2R1bGVzOiBsb2FkIG1vZHVsZXMgZnJvbSB2ZXJzaW9uZWQg
L3Zhci9ydW4gZGlyCjMxMDhmZDcgYnVpbGQtc3lzOiBkbyBub3QgbWFrZSBxZW11LWdhIGxpbmsg
d2l0aCBwaXhtYW4KNDY2OGIyYSBvc2xpYi1wb3NpeDogaW5pdGlhbGl6ZSBtdXRleCBhbmQgY29u
ZGl0aW9uIHZhcmlhYmxlCjM3NGU5MDYgaHcvaTM4Ni9pbnRlbF9pb21tdTogRml4IG91dC1vZi1i
b3VuZHMgYWNjZXNzIG9uIGd1ZXN0IElSVAo5MWFlMGI3IE1BSU5UQUlORVJTOiBBZGQgZW50cnkg
Zm9yIEd1ZXN0IFg4NiBIQVhNIENQVXMKYjc1NzkwZiBXSFBYOiBVc2UgUUVNVSB2YWx1ZXMgZm9y
IHRyYXBwZWQgQ1BVSUQKNmI0ZDAxNSBXSFBYOiBUU0MgZ2V0IGFuZCBzZXQgc2hvdWxkIGJlIGRl
cGVuZGVudCBvbiBWTSBzdGF0ZQozMWRhYjE3IHV0aWw6IGFkZCB1dGlsIGZ1bmN0aW9uIGJ1ZmZl
cl96ZXJvX2F2eDUxMigpCjFhZjIyMDEgY29uZmlndXJlOiBhZGQgY29uZmlndXJlIG9wdGlvbiBh
dng1MTJmX29wdApjODBjOGJjIG1pc2M6IFJlcGxhY2UgemVyby1sZW5ndGggYXJyYXlzIHdpdGgg
ZmxleGlibGUgYXJyYXkgbWVtYmVyIChtYW51YWwpCmNkYTE5NjUgbWlzYzogUmVwbGFjZSB6ZXJv
LWxlbmd0aCBhcnJheXMgd2l0aCBmbGV4aWJsZSBhcnJheSBtZW1iZXIgKGF1dG9tYXRpYykKYzIz
MWE0MSBvcHRpb25yb20vcHZoOiBzY2FuIGVudGlyZSBSU0RQIEFyZWEKYWMwZjgyNiBzY3NpL3Fl
bXUtcHItaGVscGVyOiBGaXggb3V0LW9mLWJvdW5kcyBhY2Nlc3MgdG8gdHJucHRpZF9saXN0W10K
Cj09PSBPVVRQVVQgQkVHSU4gPT09CjEvNjEgQ2hlY2tpbmcgY29tbWl0IGFjMGY4MjYzZTAxNSAo
c2NzaS9xZW11LXByLWhlbHBlcjogRml4IG91dC1vZi1ib3VuZHMgYWNjZXNzIHRvIHRybnB0aWRf
bGlzdFtdKQoyLzYxIENoZWNraW5nIGNvbW1pdCBjMjMxYTQxNGVjYzQgKG9wdGlvbnJvbS9wdmg6
IHNjYW4gZW50aXJlIFJTRFAgQXJlYSkKMy82MSBDaGVja2luZyBjb21taXQgY2RhMTk2NTU5MjMw
IChtaXNjOiBSZXBsYWNlIHplcm8tbGVuZ3RoIGFycmF5cyB3aXRoIGZsZXhpYmxlIGFycmF5IG1l
bWJlciAoYXV0b21hdGljKSkKNC82MSBDaGVja2luZyBjb21taXQgYzgwYzhiYzJjZmM1IChtaXNj
OiBSZXBsYWNlIHplcm8tbGVuZ3RoIGFycmF5cyB3aXRoIGZsZXhpYmxlIGFycmF5IG1lbWJlciAo
bWFudWFsKSkKNS82MSBDaGVja2luZyBjb21taXQgMWFmMjIwMTk5Y2ViIChjb25maWd1cmU6IGFk
ZCBjb25maWd1cmUgb3B0aW9uIGF2eDUxMmZfb3B0KQo2LzYxIENoZWNraW5nIGNvbW1pdCAzMWRh
YjE3ZDNmZjUgKHV0aWw6IGFkZCB1dGlsIGZ1bmN0aW9uIGJ1ZmZlcl96ZXJvX2F2eDUxMigpKQpX
QVJOSU5HOiBhcmNoaXRlY3R1cmUgc3BlY2lmaWMgZGVmaW5lcyBzaG91bGQgYmUgYXZvaWRlZAoj
NDM6IEZJTEU6IHV0aWwvYnVmZmVyaXN6ZXJvLmM6NjY6CisjaWYgZGVmaW5lZChDT05GSUdfQVZY
NTEyRl9PUFQpIHx8IGRlZmluZWQoQ09ORklHX0FWWDJfT1BUKSB8fCBkZWZpbmVkKF9fU1NFMl9f
KQoKV0FSTklORzogQmxvY2sgY29tbWVudHMgdXNlIGEgbGVhZGluZyAvKiBvbiBhIHNlcGFyYXRl
IGxpbmUKIzE2NTogRklMRTogdXRpbC9idWZmZXJpc3plcm8uYzozMDQ6CisgICAgICAgICAgICAv
KiAweGU2OgoKV0FSTklORzogQmxvY2sgY29tbWVudHMgc2hvdWxkIGFsaWduIHRoZSAqIG9uIGVh
Y2ggbGluZQojMTY2OiBGSUxFOiB1dGlsL2J1ZmZlcmlzemVyby5jOjMwNToKKyAgICAgICAgICAg
IC8qIDB4ZTY6CisgICAgICAgICAgICAqICBYQ1IwWzc6NV0gPSAxMTFiIChPUE1BU0sgc3RhdGUs
IHVwcGVyIDI1Ni1iaXQgb2YgWk1NMC1aTU0xNQoKdG90YWw6IDAgZXJyb3JzLCAzIHdhcm5pbmdz
LCAxNTAgbGluZXMgY2hlY2tlZAoKUGF0Y2ggNi82MSBoYXMgc3R5bGUgcHJvYmxlbXMsIHBsZWFz
ZSByZXZpZXcuICBJZiBhbnkgb2YgdGhlc2UgZXJyb3JzCmFyZSBmYWxzZSBwb3NpdGl2ZXMgcmVw
b3J0IHRoZW0gdG8gdGhlIG1haW50YWluZXIsIHNlZQpDSEVDS1BBVENIIGluIE1BSU5UQUlORVJT
Lgo3LzYxIENoZWNraW5nIGNvbW1pdCA2YjRkMDE1MTkzY2EgKFdIUFg6IFRTQyBnZXQgYW5kIHNl
dCBzaG91bGQgYmUgZGVwZW5kZW50IG9uIFZNIHN0YXRlKQo4LzYxIENoZWNraW5nIGNvbW1pdCBi
NzU3OTBmMTgzYjIgKFdIUFg6IFVzZSBRRU1VIHZhbHVlcyBmb3IgdHJhcHBlZCBDUFVJRCkKOS82
MSBDaGVja2luZyBjb21taXQgOTFhZTBiN2RlNDBkIChNQUlOVEFJTkVSUzogQWRkIGVudHJ5IGZv
ciBHdWVzdCBYODYgSEFYTSBDUFVzKQoxMC82MSBDaGVja2luZyBjb21taXQgMzc0ZTkwNmQwYzUy
IChody9pMzg2L2ludGVsX2lvbW11OiBGaXggb3V0LW9mLWJvdW5kcyBhY2Nlc3Mgb24gZ3Vlc3Qg
SVJUKQoxMS82MSBDaGVja2luZyBjb21taXQgNDY2OGIyYWI3MDkwIChvc2xpYi1wb3NpeDogaW5p
dGlhbGl6ZSBtdXRleCBhbmQgY29uZGl0aW9uIHZhcmlhYmxlKQpFUlJPUjogZG8gbm90IGluaXRp
YWxpc2Ugc3RhdGljcyB0byAwIG9yIE5VTEwKIzI0OiBGSUxFOiB1dGlsL29zbGliLXBvc2l4LmM6
NDY5OgorICAgIHN0YXRpYyBnc2l6ZSBpbml0aWFsaXplZCA9IDA7Cgp0b3RhbDogMSBlcnJvcnMs
IDAgd2FybmluZ3MsIDE3IGxpbmVzIGNoZWNrZWQKClBhdGNoIDExLzYxIGhhcyBzdHlsZSBwcm9i
bGVtcywgcGxlYXNlIHJldmlldy4gIElmIGFueSBvZiB0aGVzZSBlcnJvcnMKYXJlIGZhbHNlIHBv
c2l0aXZlcyByZXBvcnQgdGhlbSB0byB0aGUgbWFpbnRhaW5lciwgc2VlCkNIRUNLUEFUQ0ggaW4g
TUFJTlRBSU5FUlMuCgoxMi82MSBDaGVja2luZyBjb21taXQgMzEwOGZkNzZjOGQyIChidWlsZC1z
eXM6IGRvIG5vdCBtYWtlIHFlbXUtZ2EgbGluayB3aXRoIHBpeG1hbikKV0FSTklORzogYWRkZWQs
IG1vdmVkIG9yIGRlbGV0ZWQgZmlsZShzKSwgZG9lcyBNQUlOVEFJTkVSUyBuZWVkIHVwZGF0aW5n
PwojNDU6IApyZW5hbWUgZnJvbSBjb250cmliL3Zob3N0LXVzZXItZ3B1L21haW4uYwoKdG90YWw6
IDAgZXJyb3JzLCAxIHdhcm5pbmdzLCAxMCBsaW5lcyBjaGVja2VkCgpQYXRjaCAxMi82MSBoYXMg
c3R5bGUgcHJvYmxlbXMsIHBsZWFzZSByZXZpZXcuICBJZiBhbnkgb2YgdGhlc2UgZXJyb3JzCmFy
ZSBmYWxzZSBwb3NpdGl2ZXMgcmVwb3J0IHRoZW0gdG8gdGhlIG1haW50YWluZXIsIHNlZQpDSEVD
S1BBVENIIGluIE1BSU5UQUlORVJTLgoxMy82MSBDaGVja2luZyBjb21taXQgNTkzMzdjMDI4MzNk
IChtb2R1bGVzOiBsb2FkIG1vZHVsZXMgZnJvbSB2ZXJzaW9uZWQgL3Zhci9ydW4gZGlyKQoxNC82
MSBDaGVja2luZyBjb21taXQgMGI0NDA2MmE2NGFlIChjb25maWd1cmU6IEZpeCBidWlsZGluZyB3
aXRoIFNBU0wgb24gV2luZG93cykKMTUvNjEgQ2hlY2tpbmcgY29tbWl0IGJiYjBkMDM5YTA5ZSAo
dGVzdHMvZG9ja2VyOiBJbnN0YWxsIFNBU0wgbGlicmFyeSB0byBleHRlbmQgY29kZSBjb3ZlcmFn
ZSBvbiBhbWQ2NCkKMTYvNjEgQ2hlY2tpbmcgY29tbWl0IGY3OGE4YjA3MWM0YyAobWVtb3J5OiBG
aXggc3RhcnQgb2Zmc2V0IGZvciBiaXRtYXAgbG9nX2NsZWFyIGhvb2spCldBUk5JTkc6IGxpbmUg
b3ZlciA4MCBjaGFyYWN0ZXJzCiM0NjogRklMRTogZXhlYy5jOjEzNDk6CisgICAgICAgIG1yX29m
ZnNldCA9IChyYW1fYWRkcl90KShzdGFydF9wYWdlIDw8IFRBUkdFVF9QQUdFX0JJVFMpIC0gcmFt
YmxvY2stPm9mZnNldDsKCnRvdGFsOiAwIGVycm9ycywgMSB3YXJuaW5ncywgMjcgbGluZXMgY2hl
Y2tlZAoKUGF0Y2ggMTYvNjEgaGFzIHN0eWxlIHByb2JsZW1zLCBwbGVhc2UgcmV2aWV3LiAgSWYg
YW55IG9mIHRoZXNlIGVycm9ycwphcmUgZmFsc2UgcG9zaXRpdmVzIHJlcG9ydCB0aGVtIHRvIHRo
ZSBtYWludGFpbmVyLCBzZWUKQ0hFQ0tQQVRDSCBpbiBNQUlOVEFJTkVSUy4KMTcvNjEgQ2hlY2tp
bmcgY29tbWl0IDY1NjkyYzYwNDE5MSAocW9tL29iamVjdDogZW5hYmxlIHNldHRlciBmb3IgdWlu
dCB0eXBlcykKMTgvNjEgQ2hlY2tpbmcgY29tbWl0IGE1Y2FhODZmODM3MSAoaWNoOTogZml4IGdl
dHRlciB0eXBlIGZvciBzY2lfaW50IHByb3BlcnR5KQoxOS82MSBDaGVja2luZyBjb21taXQgN2U3
Y2U0ODljNGQ0IChpY2g5OiBTaW1wbGlmeSBpY2g5X2xwY19pbml0Zm4pCjIwLzYxIENoZWNraW5n
IGNvbW1pdCAxZWE4ODc1NjI5MGYgKHFvbS9vYmplY3Q6IFVzZSBjb21tb24gZ2V0L3NldCB1aW50
IGhlbHBlcnMpCjIxLzYxIENoZWNraW5nIGNvbW1pdCA3ZmVlYjMzZmQzNzcgKGkzODY6IEZpeCBH
Q0Mgd2FybmluZyB3aXRoIHNucHJpbnRmIHdoZW4gSEFYIGlzIGVuYWJsZWQpCjIyLzYxIENoZWNr
aW5nIGNvbW1pdCBiMzIxOWU1MzFkYjYgKFdIUFg6IFVzZSBwcm9wZXIgc3luY2hyb25pemF0aW9u
IHByaW1pdGl2ZXMgd2hpbGUgcHJvY2Vzc2luZykKMjMvNjEgQ2hlY2tpbmcgY29tbWl0IDlhYzI5
N2E4ZmRmYiAoTWFrZWZpbGU6IEFsaWduICdoZWxwJyB0YXJnZXQgb3V0cHV0KQoyNC82MSBDaGVj
a2luZyBjb21taXQgYTFlYTFkNTAzMGJlIChNYWtlZmlsZTogTGV0IHRoZSAnaGVscCcgdGFyZ2V0
IGxpc3QgdGhlIHRvb2xzIHRhcmdldHMpCjI1LzYxIENoZWNraW5nIGNvbW1pdCBjYzIxYjg3NTY0
YmUgKGh3L2F1ZGlvL2Ztb3BsOiBNb3ZlIEVOVl9DVVJWRSB0byAuaGVhcCB0byBzYXZlIDMyS2lC
IG9mIC5ic3MpCjI2LzYxIENoZWNraW5nIGNvbW1pdCBjODc3ODRiNDhmMjcgKGh3L2F1ZGlvL2lu
dGVsLWhkYTogVXNlIG1lbW9yeSByZWdpb24gYWxpYXMgdG8gcmVkdWNlIC5yb2RhdGEgYnkgNC4z
NE1CKQoyNy82MSBDaGVja2luZyBjb21taXQgN2MzZTQ5ZjFmOGMyIChody91c2IvcXVpcmtzOiBV
c2Ugc21hbGxlciB0eXBlcyB0byByZWR1Y2UgLnJvZGF0YSBieSAxMEtpQikKMjgvNjEgQ2hlY2tp
bmcgY29tbWl0IGQ1NTczYWNmM2RkMiAodWkvY3Vyc2VzOiBNYWtlIGNvbnRyb2xfY2hhcmFjdGVy
c1tdIGFycmF5IGNvbnN0KQoyOS82MSBDaGVja2luZyBjb21taXQgZmRhNDAyZmE4MDI3ICh1aS9j
dXJzZXM6IE1vdmUgYXJyYXlzIHRvIC5oZWFwIHRvIHNhdmUgNzRLaUIgb2YgLmJzcykKMzAvNjEg
Q2hlY2tpbmcgY29tbWl0IGNiZTZiMDRiOGJhNyAocWVtdS1jcHUtbW9kZWxzLnJzdDogRG9jdW1l
bnQgLW5vVFNYLCBtZHMtbm8sIHRhYS1ubywgYW5kIHRzeC1jdHJsKQozMS82MSBDaGVja2luZyBj
b21taXQgNWUyODQ1NWQ2NGVmIChzb2Z0bW11L3ZsLmM6IEhhbmRsZSAnLWNwdSBoZWxwJyBhbmQg
Jy1kZXZpY2UgaGVscCcgYmVmb3JlICdubyBkZWZhdWx0IG1hY2hpbmUnKQozMi82MSBDaGVja2lu
ZyBjb21taXQgNDZjY2E0M2Q2MmE1IChVc2UgLWlzeXN0ZW0gZm9yIGxpbnV4LWhlYWRlcnMgZGly
KQozMy82MSBDaGVja2luZyBjb21taXQgM2M2ZDI3NzI5MWJiIChleGVjL3JvbV9yZXNldDogRnJl
ZSByb20gZGF0YSBkdXJpbmcgaW5taWdyYXRlIHNraXApCjM0LzYxIENoZWNraW5nIGNvbW1pdCA3
NzNiNDM2MDM4OGIgKGNwdXM6IGF2b2lkIHBhdXNlX2FsbF92Y3B1cyBnZXR0aW5nIHN0dWNrIGR1
ZSB0byByYWNlKQozNS82MSBDaGVja2luZyBjb21taXQgNzE0NWRhNzQ2NzUzIChsb2NrYWJsZTog
YWRkIGxvY2sgZ3VhcmRzKQozNi82MSBDaGVja2luZyBjb21taXQgNDIwMjcyYTEyMjVhIChsb2Nr
YWJsZTogYWRkIFFlbXVSZWNNdXRleCBzdXBwb3J0KQozNy82MSBDaGVja2luZyBjb21taXQgYWYx
ZThjYTZkYmUyIChtZW1vcnk6IENvcnJlY3RseSByZXR1cm4gYWxpYXMgcmVnaW9uIHR5cGUpCjM4
LzYxIENoZWNraW5nIGNvbW1pdCBhZjJhNzE5MzlhNGYgKG1lbW9yeTogU2ltcGxpZnkgbWVtb3J5
X3JlZ2lvbl9pbml0X3JvbV9ub21pZ3JhdGUoKSB0byBlYXNlIHJldmlldykKMzkvNjEgQ2hlY2tp
bmcgY29tbWl0IDRmZWQ4NTUyMjI5OSAoc2NyaXB0cy9jb2NjaTogUmVuYW1lIG1lbW9yeS1yZWdp
b24te2luaXQtcmFtIC0+IGhvdXNla2VlcGluZ30pCldBUk5JTkc6IGFkZGVkLCBtb3ZlZCBvciBk
ZWxldGVkIGZpbGUocyksIGRvZXMgTUFJTlRBSU5FUlMgbmVlZCB1cGRhdGluZz8KIzI5OiAKcmVu
YW1lIGZyb20gc2NyaXB0cy9jb2NjaW5lbGxlL21lbW9yeS1yZWdpb24taW5pdC1yYW0uY29jY2kK
CnRvdGFsOiAwIGVycm9ycywgMSB3YXJuaW5ncywgMjMgbGluZXMgY2hlY2tlZAoKUGF0Y2ggMzkv
NjEgaGFzIHN0eWxlIHByb2JsZW1zLCBwbGVhc2UgcmV2aWV3LiAgSWYgYW55IG9mIHRoZXNlIGVy
cm9ycwphcmUgZmFsc2UgcG9zaXRpdmVzIHJlcG9ydCB0aGVtIHRvIHRoZSBtYWludGFpbmVyLCBz
ZWUKQ0hFQ0tQQVRDSCBpbiBNQUlOVEFJTkVSUy4KNDAvNjEgQ2hlY2tpbmcgY29tbWl0IDkzM2E2
YzU1NjY2YiAoc2NyaXB0cy9jb2NjaTogUGF0Y2ggdG8gcmVwbGFjZSBtZW1vcnlfcmVnaW9uX2lu
aXRfe3JhbSwgcmVhZG9ubHkgLT4gcm9tfSkKNDEvNjEgQ2hlY2tpbmcgY29tbWl0IDUxZDc0NWJj
ODM5ZCAoaHcvYXJtOiBVc2UgbWVtb3J5X3JlZ2lvbl9pbml0X3JvbSgpIHdpdGggcmVhZC1vbmx5
IHJlZ2lvbnMpCjQyLzYxIENoZWNraW5nIGNvbW1pdCAzOTliYTA2YTNkMWIgKGh3L2Rpc3BsYXk6
IFVzZSBtZW1vcnlfcmVnaW9uX2luaXRfcm9tKCkgd2l0aCByZWFkLW9ubHkgcmVnaW9ucykKNDMv
NjEgQ2hlY2tpbmcgY29tbWl0IGVkOWNkMWYzODk2YiAoaHcvbTY4azogVXNlIG1lbW9yeV9yZWdp
b25faW5pdF9yb20oKSB3aXRoIHJlYWQtb25seSByZWdpb25zKQo0NC82MSBDaGVja2luZyBjb21t
aXQgYTY4NTAwZjVhYThkIChody9uZXQ6IFVzZSBtZW1vcnlfcmVnaW9uX2luaXRfcm9tKCkgd2l0
aCByZWFkLW9ubHkgcmVnaW9ucykKNDUvNjEgQ2hlY2tpbmcgY29tbWl0IGIxMDUzNjliMDdkYiAo
aHcvcGNpLWhvc3Q6IFVzZSBtZW1vcnlfcmVnaW9uX2luaXRfcm9tKCkgd2l0aCByZWFkLW9ubHkg
cmVnaW9ucykKNDYvNjEgQ2hlY2tpbmcgY29tbWl0IGVkNDgyNmVkYzEyMSAoaHcvcHBjOiBVc2Ug
bWVtb3J5X3JlZ2lvbl9pbml0X3JvbSgpIHdpdGggcmVhZC1vbmx5IHJlZ2lvbnMpCjQ3LzYxIENo
ZWNraW5nIGNvbW1pdCBlYjA5MzQ5NmFmNDEgKGh3L3Jpc2N2OiBVc2UgbWVtb3J5X3JlZ2lvbl9p
bml0X3JvbSgpIHdpdGggcmVhZC1vbmx5IHJlZ2lvbnMpCjQ4LzYxIENoZWNraW5nIGNvbW1pdCAz
ZWIyMjdhOTUyZmUgKGh3L3NoNDogVXNlIG1lbW9yeV9yZWdpb25faW5pdF9yb20oKSB3aXRoIHJl
YWQtb25seSByZWdpb25zKQo0OS82MSBDaGVja2luZyBjb21taXQgNWUyOTY1NzAzYWYwIChody9z
cGFyYzogVXNlIG1lbW9yeV9yZWdpb25faW5pdF9yb20oKSB3aXRoIHJlYWQtb25seSByZWdpb25z
KQo1MC82MSBDaGVja2luZyBjb21taXQgNzEwNWYxMzhkZTNkIChzY3JpcHRzL2NvY2NpOiBQYXRj
aCB0byBkZXRlY3QgcG90ZW50aWFsIHVzZSBvZiBtZW1vcnlfcmVnaW9uX2luaXRfcm9tKQo1MS82
MSBDaGVja2luZyBjb21taXQgNzgzOTdhMGQ5MjI0IChzY3JpcHRzL2NvY2NpOiBQYXRjaCB0byBy
ZW1vdmUgdW5uZWNlc3NhcnkgbWVtb3J5X3JlZ2lvbl9zZXRfcmVhZG9ubHkoKSkKNTIvNjEgQ2hl
Y2tpbmcgY29tbWl0IGNiYjQ4MjYwNzc4MCAoc2NyaXB0cy9jb2NjaTogUGF0Y2ggdG8gbGV0IGRl
dmljZXMgb3duIHRoZWlyIE1lbW9yeVJlZ2lvbnMpCjUzLzYxIENoZWNraW5nIGNvbW1pdCAyNDQw
ZDNkZjExNDAgKGh3L2NvcmU6IExldCBkZXZpY2VzIG93biB0aGUgTWVtb3J5UmVnaW9uIHRoZXkg
Y3JlYXRlKQo1NC82MSBDaGVja2luZyBjb21taXQgNDFiMDk0OTE2YzZjIChody9kaXNwbGF5OiBM
ZXQgZGV2aWNlcyBvd24gdGhlIE1lbW9yeVJlZ2lvbiB0aGV5IGNyZWF0ZSkKNTUvNjEgQ2hlY2tp
bmcgY29tbWl0IDMyZTgyMTA4ZWIwMSAoaHcvZG1hOiBMZXQgZGV2aWNlcyBvd24gdGhlIE1lbW9y
eVJlZ2lvbiB0aGV5IGNyZWF0ZSkKNTYvNjEgQ2hlY2tpbmcgY29tbWl0IDVmYWFlYzkyNmQyZSAo
aHcvcmlzY3Y6IExldCBkZXZpY2VzIG93biB0aGUgTWVtb3J5UmVnaW9uIHRoZXkgY3JlYXRlKQo1
Ny82MSBDaGVja2luZyBjb21taXQgMzdiOTM3Y2I1NGY1IChody9jaGFyOiBMZXQgZGV2aWNlcyBv
d24gdGhlIE1lbW9yeVJlZ2lvbiB0aGV5IGNyZWF0ZSkKNTgvNjEgQ2hlY2tpbmcgY29tbWl0IDAx
NGE3ZjZlZTllNiAoaHcvYXJtL3N0bTMyOiBVc2UgbWVtb3J5X3JlZ2lvbl9pbml0X3JvbSgpIHdp
dGggcmVhZC1vbmx5IHJlZ2lvbnMpCjU5LzYxIENoZWNraW5nIGNvbW1pdCBmMjZjNmVjYzk2YjIg
KGh3L3BwYy9wcGM0MDU6IFVzZSBtZW1vcnlfcmVnaW9uX2luaXRfcm9tKCkgd2l0aCByZWFkLW9u
bHkgcmVnaW9ucykKNjAvNjEgQ2hlY2tpbmcgY29tbWl0IGFjZWZkNDdiMzJjNyAoaHcvYXJtOiBS
ZW1vdmUgdW5uZWNlc3NhcnkgbWVtb3J5X3JlZ2lvbl9zZXRfcmVhZG9ubHkoKSBvbiBST00gYWxp
YXMpCjYxLzYxIENoZWNraW5nIGNvbW1pdCBjZDQ2Y2MyOGZjMzIgKGh3L2FybTogTGV0IGRldmlj
ZXMgb3duIHRoZSBNZW1vcnlSZWdpb24gdGhleSBjcmVhdGUpCj09PSBPVVRQVVQgRU5EID09PQoK
VGVzdCBjb21tYW5kIGV4aXRlZCB3aXRoIGNvZGU6IDEKCgpUaGUgZnVsbCBsb2cgaXMgYXZhaWxh
YmxlIGF0Cmh0dHA6Ly9wYXRjaGV3Lm9yZy9sb2dzLzE1ODQzOTQwNDgtNDQ5OTQtMS1naXQtc2Vu
ZC1lbWFpbC1wYm9uemluaUByZWRoYXQuY29tL3Rlc3RpbmcuY2hlY2twYXRjaC8/dHlwZT1tZXNz
YWdlLgotLS0KRW1haWwgZ2VuZXJhdGVkIGF1dG9tYXRpY2FsbHkgYnkgUGF0Y2hldyBbaHR0cHM6
Ly9wYXRjaGV3Lm9yZy9dLgpQbGVhc2Ugc2VuZCB5b3VyIGZlZWRiYWNrIHRvIHBhdGNoZXctZGV2
ZWxAcmVkaGF0LmNvbQ==

