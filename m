Return-Path: <qemu-devel-bounces+lists+qemu-devel=lfdr.de@nongnu.org>
X-Original-To: lists+qemu-devel@lfdr.de
Delivered-To: lists+qemu-devel@lfdr.de
Received: from lists.gnu.org (lists.gnu.org [209.51.188.17])
	by mail.lfdr.de (Postfix) with ESMTPS id 65885168E01
	for <lists+qemu-devel@lfdr.de>; Sat, 22 Feb 2020 10:14:56 +0100 (CET)
Received: from localhost ([::1]:40752 helo=lists1p.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.90_1)
	(envelope-from <qemu-devel-bounces+lists+qemu-devel=lfdr.de@nongnu.org>)
	id 1j5QsB-0005fG-7X
	for lists+qemu-devel@lfdr.de; Sat, 22 Feb 2020 04:14:55 -0500
Received: from eggs.gnu.org ([2001:470:142:3::10]:42958)
 by lists.gnu.org with esmtp (Exim 4.90_1)
 (envelope-from <no-reply@patchew.org>) id 1j5QrS-00058W-2T
 for qemu-devel@nongnu.org; Sat, 22 Feb 2020 04:14:11 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
 (envelope-from <no-reply@patchew.org>) id 1j5QrP-0004zP-RX
 for qemu-devel@nongnu.org; Sat, 22 Feb 2020 04:14:09 -0500
Resent-Date: Sat, 22 Feb 2020 04:14:09 -0500
Resent-Message-Id: <E1j5QrP-0004zP-RX@eggs.gnu.org>
Received: from sender4-of-o51.zoho.com ([136.143.188.51]:21154)
 by eggs.gnu.org with esmtps (TLS1.0:RSA_AES_256_CBC_SHA1:32)
 (Exim 4.71) (envelope-from <no-reply@patchew.org>)
 id 1j5QrP-0004wq-JX; Sat, 22 Feb 2020 04:14:07 -0500
ARC-Seal: i=1; a=rsa-sha256; t=1582362814; cv=none; 
 d=zohomail.com; s=zohoarc; 
 b=iIwqgS/jaqr3LZSVYsdJpVGIcdQUJoOdryjOEv6/NCp1XQWEirZ0MhVH5FF7B1m9K5HRX5dUbNlYBSC99TXRiKv9I/0JNLXlXd23ZTWgZtncIDrwiJ3bI9HuOZu8B7guAMUT8hXDF5gz+YWI+GGmhMbCGHTIyzNPnvzMoHHBT0E=
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=zohomail.com;
 s=zohoarc; t=1582362814;
 h=Content-Type:Content-Transfer-Encoding:Cc:Date:From:In-Reply-To:MIME-Version:Message-ID:Reply-To:Subject:To;
 bh=IUbDoY1nCOadfigcvUYk77hjjkdyKmf6KCIjbCB2X+Y=; 
 b=PC62p7mHnSJF+v1ChOzSPiud+E2Jadc2qWuk+XV/xhdIS7sSb2UkjlYDxeXUhP3BewsC1IcDSuSz4wYlYZ5gw3Hn4GTZEZXN2snslHr1ysDldVgubpy3fJyqInbdJBpyj548ePACv5ECc9KftvUiX8UlwF8R5/qm2A/P6kDS0Lw=
ARC-Authentication-Results: i=1; mx.zohomail.com;
 dkim=pass  header.i=patchew.org;
 spf=pass  smtp.mailfrom=no-reply@patchew.org;
 dmarc=pass header.from=<no-reply@patchew.org>
 header.from=<no-reply@patchew.org>
Received: from [172.17.0.3] (23.253.156.214 [23.253.156.214]) by
 mx.zohomail.com with SMTPS id 1582362812848670.0705371980263;
 Sat, 22 Feb 2020 01:13:32 -0800 (PST)
In-Reply-To: <20200222085030.1760640-1-stefanha@redhat.com>
Subject: Re: [PULL 00/31] Block patches
Message-ID: <158236281080.7375.15959926465237508138@a1bbccc8075a>
MIME-Version: 1.0
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: base64
Resent-From: 
From: no-reply@patchew.org
To: stefanha@redhat.com
Date: Sat, 22 Feb 2020 01:13:32 -0800 (PST)
X-ZohoMailClient: External
X-detected-operating-system: by eggs.gnu.org: GNU/Linux 2.2.x-3.x [generic]
 [fuzzy]
X-Received-From: 136.143.188.51
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.23
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
 <mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <https://lists.nongnu.org/archive/html/qemu-devel>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
 <mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Reply-To: qemu-devel@nongnu.org
Cc: kwolf@redhat.com, peter.maydell@linaro.org, thuth@redhat.com,
 ehabkost@redhat.com, qemu-block@nongnu.org, mst@redhat.com, lvivier@redhat.com,
 qemu-devel@nongnu.org, mreitz@redhat.com, alxndr@bu.edu, bsd@redhat.com,
 stefanha@redhat.com, pbonzini@redhat.com, marcandre.lureau@redhat.com,
 fam@euphon.net, rth@twiddle.net
Errors-To: qemu-devel-bounces+lists+qemu-devel=lfdr.de@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+lists+qemu-devel=lfdr.de@nongnu.org>

UGF0Y2hldyBVUkw6IGh0dHBzOi8vcGF0Y2hldy5vcmcvUUVNVS8yMDIwMDIyMjA4NTAzMC4xNzYw
NjQwLTEtc3RlZmFuaGFAcmVkaGF0LmNvbS8KCgoKSGksCgpUaGlzIHNlcmllcyBzZWVtcyB0byBo
YXZlIHNvbWUgY29kaW5nIHN0eWxlIHByb2JsZW1zLiBTZWUgb3V0cHV0IGJlbG93IGZvcgptb3Jl
IGluZm9ybWF0aW9uOgoKU3ViamVjdDogW1BVTEwgMDAvMzFdIEJsb2NrIHBhdGNoZXMKTWVzc2Fn
ZS1pZDogMjAyMDAyMjIwODUwMzAuMTc2MDY0MC0xLXN0ZWZhbmhhQHJlZGhhdC5jb20KVHlwZTog
c2VyaWVzCgo9PT0gVEVTVCBTQ1JJUFQgQkVHSU4gPT09CiMhL2Jpbi9iYXNoCmdpdCByZXYtcGFy
c2UgYmFzZSA+IC9kZXYvbnVsbCB8fCBleGl0IDAKZ2l0IGNvbmZpZyAtLWxvY2FsIGRpZmYucmVu
YW1lbGltaXQgMApnaXQgY29uZmlnIC0tbG9jYWwgZGlmZi5yZW5hbWVzIFRydWUKZ2l0IGNvbmZp
ZyAtLWxvY2FsIGRpZmYuYWxnb3JpdGhtIGhpc3RvZ3JhbQouL3NjcmlwdHMvY2hlY2twYXRjaC5w
bCAtLW1haWxiYWNrIGJhc2UuLgo9PT0gVEVTVCBTQ1JJUFQgRU5EID09PQoKVXBkYXRpbmcgM2M4
Y2Y1YTljMjFmZjg3ODIxNjRkMWRlZjdmNDRiZDg4ODcxMzM4NApGcm9tIGh0dHBzOi8vZ2l0aHVi
LmNvbS9wYXRjaGV3LXByb2plY3QvcWVtdQogKiBbbmV3IHRhZ10gICAgICAgICBwYXRjaGV3LzIw
MjAwMjIyMDg1MDMwLjE3NjA2NDAtMS1zdGVmYW5oYUByZWRoYXQuY29tIC0+IHBhdGNoZXcvMjAy
MDAyMjIwODUwMzAuMTc2MDY0MC0xLXN0ZWZhbmhhQHJlZGhhdC5jb20KU3dpdGNoZWQgdG8gYSBu
ZXcgYnJhbmNoICd0ZXN0JwpkYzM4MmIxIGZ1eno6IGFkZCBkb2N1bWVudGF0aW9uIHRvIGRvY3Mv
ZGV2ZWwvCjAwM2JiZDAgZnV6ejogYWRkIHZpcnRpby1zY3NpIGZ1enogdGFyZ2V0CmU4ODAyZjkg
ZnV6ejogYWRkIHZpcnRpby1uZXQgZnV6eiB0YXJnZXQKNjllMTNhZCBmdXp6OiBhZGQgaTQ0MGZ4
IGZ1enogdGFyZ2V0cwo0MDgzZGNiIGZ1eno6IGFkZCBjb25maWd1cmUgZmxhZyAtLWVuYWJsZS1m
dXp6aW5nCmMzZDIyNDAgZnV6ejogYWRkIHRhcmdldC9mdXp6IG1ha2VmaWxlIHJ1bGVzCjdjNGQy
ZmIgZnV6ejogYWRkIHN1cHBvcnQgZm9yIHFvcy1hc3Npc3RlZCBmdXp6IHRhcmdldHMKODUxOGM4
ZCBmdXp6OiBzdXBwb3J0IGZvciBmb3JrLWJhc2VkIGZ1enppbmcuCjZhMjg2ZWQgbWFpbjoga2Vl
cCByY3VfYXRmb3JrIGNhbGxiYWNrIGVuYWJsZWQgZm9yIHF0ZXN0CmVkOTQxYzcgZXhlYzoga2Vl
cCByYW0gYmxvY2sgYWNyb3NzIGZvcmsgd2hlbiB1c2luZyBxdGVzdAplMjQzMTNmIGZ1eno6IGFk
ZCBmdXp6ZXIgc2tlbGV0b24KNDA4ZGYwNyBsaWJxb3M6IG1vdmUgdXNlZnVsIHFvcy10ZXN0IGZ1
bmNzIHRvIHFvc19leHRlcm5hbApkN2RhYWM3IGxpYnFvczogc3BsaXQgcW9zLXRlc3QgYW5kIGxp
YnFvcyBtYWtlZmlsZSB2YXJzCjRiY2ViMDEgbGlicW9zOiByZW5hbWUgaTJjX3NlbmQgYW5kIGky
Y19yZWN2CjRlYTkyZjIgcXRlc3Q6IGFkZCBpbi1wcm9jZXNzIGluY29taW5nIGNvbW1hbmQgaGFu
ZGxlcgowYWRmYzMzIGxpYnF0ZXN0OiBtYWtlIGJ1ZndyaXRlIHJlbHkgb24gdGhlIFRyYW5zcG9y
dE9wcwo3ODBkYTlmIGxpYnF0ZXN0OiBhZGQgYSBsYXllciBvZiBhYnN0cmFjdGlvbiB0byBzZW5k
L3JlY3YKYmNjMDg0YiBxdGVzdDogYWRkIHF0ZXN0X3NlcnZlcl9zZW5kIGFic3RyYWN0aW9uCjI2
NmMyYzUgZnV6ejogYWRkIEZVWlpfVEFSR0VUIG1vZHVsZSB0eXBlCjY2YjY5MzkgbW9kdWxlOiBj
aGVjayBtb2R1bGUgd2Fzbid0IGFscmVhZHkgaW5pdGlhbGl6ZWQKMDA5NDk0ZSBzb2Z0bW11OiBz
cGxpdCBvZmYgdmwuYzptYWluKCkgaW50byBtYWluLmMKMjg3OTZhZCBzb2Z0bW11OiBtb3ZlIHZs
LmMgdG8gc29mdG1tdS8KNmI4YTNmNyBhaW8tcG9zaXg6IG1ha2UgQWlvSGFuZGxlciBkaXNwYXRj
aCBPKDEpIHdpdGggZXBvbGwKYjgzOTM1NyBhaW8tcG9zaXg6IG1ha2UgQWlvSGFuZGxlciBkZWxl
dGlvbiBPKDEpCjVjOTM5N2QgcWVtdS9xdWV1ZS5oOiBhZGQgUUxJU1RfU0FGRV9SRU1PVkUoKQo4
Y2QxMWI0IGFpby1wb3NpeDogZG9uJ3QgcGFzcyBucyB0aW1lb3V0IHRvIGVwb2xsX3dhaXQoKQo0
MjUyZGQzIGFpby1wb3NpeDogZml4IHVzZSBhZnRlciBsZWF2aW5nIHNjb3BlIGluIGFpb19wb2xs
KCkKZTg1MGFkOCB1dGlsL2FzeW5jOiBtYWtlIGJoX2Fpb19wb2xsKCkgTygxKQozYWU4ZTJkIHJj
dV9xdWV1ZTogYWRkIFFTTElTVCBmdW5jdGlvbnMKYjU5M2ViMyBhaW8tcG9zaXg6IGF2b2lkIHJl
YWNxdWlyaW5nIHJjdV9yZWFkX2xvY2soKSB3aGVuIHBvbGxpbmcKNmZiYmQ4NiB2aXJ0aW86IGlu
Y3JlYXNlIHZpcnRxdWV1ZSBzaXplIGZvciB2aXJ0aW8tc2NzaSBhbmQgdmlydGlvLWJsawoKPT09
IE9VVFBVVCBCRUdJTiA9PT0KMS8zMSBDaGVja2luZyBjb21taXQgNmZiYmQ4NjkwMTBlICh2aXJ0
aW86IGluY3JlYXNlIHZpcnRxdWV1ZSBzaXplIGZvciB2aXJ0aW8tc2NzaSBhbmQgdmlydGlvLWJs
aykKMi8zMSBDaGVja2luZyBjb21taXQgYjU5M2ViM2EzMmU5IChhaW8tcG9zaXg6IGF2b2lkIHJl
YWNxdWlyaW5nIHJjdV9yZWFkX2xvY2soKSB3aGVuIHBvbGxpbmcpCjMvMzEgQ2hlY2tpbmcgY29t
bWl0IDNhZThlMmQ4OTIwMiAocmN1X3F1ZXVlOiBhZGQgUVNMSVNUIGZ1bmN0aW9ucykKV0FSTklO
RzogQmxvY2sgY29tbWVudHMgdXNlIGEgbGVhZGluZyAvKiBvbiBhIHNlcGFyYXRlIGxpbmUKIzI5
OiBGSUxFOiBpbmNsdWRlL3FlbXUvcXVldWUuaDoyMTc6Cit9IHdoaWxlICgvKkNPTlNUQ09ORCov
MCkKCldBUk5JTkc6IEJsb2NrIGNvbW1lbnRzIHVzZSBhIGxlYWRpbmcgLyogb24gYSBzZXBhcmF0
ZSBsaW5lCiM2NDogRklMRTogaW5jbHVkZS9xZW11L3JjdV9xdWV1ZS5oOjI3ODoKK30gd2hpbGUg
KC8qQ09OU1RDT05EKi8wKQoKV0FSTklORzogQmxvY2sgY29tbWVudHMgdXNlIGEgbGVhZGluZyAv
KiBvbiBhIHNlcGFyYXRlIGxpbmUKIzY5OiBGSUxFOiBpbmNsdWRlL3FlbXUvcmN1X3F1ZXVlLmg6
MjgzOgorfSB3aGlsZSAoLypDT05TVENPTkQqLzApCgpXQVJOSU5HOiBCbG9jayBjb21tZW50cyB1
c2UgYSBsZWFkaW5nIC8qIG9uIGEgc2VwYXJhdGUgbGluZQojNzM6IEZJTEU6IGluY2x1ZGUvcWVt
dS9yY3VfcXVldWUuaDoyODc6Cit9IHdoaWxlICgvKkNPTlNUQ09ORCovMCkKCldBUk5JTkc6IEJs
b2NrIGNvbW1lbnRzIHVzZSBhIGxlYWRpbmcgLyogb24gYSBzZXBhcmF0ZSBsaW5lCiM4NjogRklM
RTogaW5jbHVkZS9xZW11L3JjdV9xdWV1ZS5oOjMwMDoKK30gd2hpbGUgKC8qQ09OU1RDT05EKi8w
KQoKRVJST1I6IGNvZGUgaW5kZW50IHNob3VsZCBuZXZlciB1c2UgdGFicwojMTQ0OiBGSUxFOiB0
ZXN0cy90ZXN0LXJjdS1saXN0LmM6MTU1OgorXkkgUVNMSVNUX1JFTU9WRV9SQ1UoJlFfbGlzdF9o
ZWFkLCBlbCwgbGlzdF9lbGVtZW50LCBmKSQKCldBUk5JTkc6IGFkZGVkLCBtb3ZlZCBvciBkZWxl
dGVkIGZpbGUocyksIGRvZXMgTUFJTlRBSU5FUlMgbmVlZCB1cGRhdGluZz8KIzE1NjogCm5ldyBm
aWxlIG1vZGUgMTAwNjQ0Cgp0b3RhbDogMSBlcnJvcnMsIDYgd2FybmluZ3MsIDExOSBsaW5lcyBj
aGVja2VkCgpQYXRjaCAzLzMxIGhhcyBzdHlsZSBwcm9ibGVtcywgcGxlYXNlIHJldmlldy4gIElm
IGFueSBvZiB0aGVzZSBlcnJvcnMKYXJlIGZhbHNlIHBvc2l0aXZlcyByZXBvcnQgdGhlbSB0byB0
aGUgbWFpbnRhaW5lciwgc2VlCkNIRUNLUEFUQ0ggaW4gTUFJTlRBSU5FUlMuCgo0LzMxIENoZWNr
aW5nIGNvbW1pdCBlODUwYWQ4MzU3NGIgKHV0aWwvYXN5bmM6IG1ha2UgYmhfYWlvX3BvbGwoKSBP
KDEpKQo1LzMxIENoZWNraW5nIGNvbW1pdCA0MjUyZGQzNzZkNGMgKGFpby1wb3NpeDogZml4IHVz
ZSBhZnRlciBsZWF2aW5nIHNjb3BlIGluIGFpb19wb2xsKCkpCjYvMzEgQ2hlY2tpbmcgY29tbWl0
IDhjZDExYjQ2YzBmOCAoYWlvLXBvc2l4OiBkb24ndCBwYXNzIG5zIHRpbWVvdXQgdG8gZXBvbGxf
d2FpdCgpKQo3LzMxIENoZWNraW5nIGNvbW1pdCA1YzkzOTdkYWQ5NDMgKHFlbXUvcXVldWUuaDog
YWRkIFFMSVNUX1NBRkVfUkVNT1ZFKCkpCldBUk5JTkc6IEJsb2NrIGNvbW1lbnRzIHVzZSBhIGxl
YWRpbmcgLyogb24gYSBzZXBhcmF0ZSBsaW5lCiM3MDogRklMRTogaW5jbHVkZS9xZW11L3F1ZXVl
Lmg6MTU5OgorfSB3aGlsZSAoLypDT05TVENPTkQqLzApCgp0b3RhbDogMCBlcnJvcnMsIDEgd2Fy
bmluZ3MsIDQxIGxpbmVzIGNoZWNrZWQKClBhdGNoIDcvMzEgaGFzIHN0eWxlIHByb2JsZW1zLCBw
bGVhc2UgcmV2aWV3LiAgSWYgYW55IG9mIHRoZXNlIGVycm9ycwphcmUgZmFsc2UgcG9zaXRpdmVz
IHJlcG9ydCB0aGVtIHRvIHRoZSBtYWludGFpbmVyLCBzZWUKQ0hFQ0tQQVRDSCBpbiBNQUlOVEFJ
TkVSUy4KOC8zMSBDaGVja2luZyBjb21taXQgYjgzOTM1Nzc0NTQ1IChhaW8tcG9zaXg6IG1ha2Ug
QWlvSGFuZGxlciBkZWxldGlvbiBPKDEpKQo5LzMxIENoZWNraW5nIGNvbW1pdCA2YjhhM2Y3OWJh
ODYgKGFpby1wb3NpeDogbWFrZSBBaW9IYW5kbGVyIGRpc3BhdGNoIE8oMSkgd2l0aCBlcG9sbCkK
MTAvMzEgQ2hlY2tpbmcgY29tbWl0IDI4Nzk2YWQ1ZDgyMiAoc29mdG1tdTogbW92ZSB2bC5jIHRv
IHNvZnRtbXUvKQpXQVJOSU5HOiBhZGRlZCwgbW92ZWQgb3IgZGVsZXRlZCBmaWxlKHMpLCBkb2Vz
IE1BSU5UQUlORVJTIG5lZWQgdXBkYXRpbmc/CiM4MzogCm5ldyBmaWxlIG1vZGUgMTAwNjQ0Cgp0
b3RhbDogMCBlcnJvcnMsIDEgd2FybmluZ3MsIDQyIGxpbmVzIGNoZWNrZWQKClBhdGNoIDEwLzMx
IGhhcyBzdHlsZSBwcm9ibGVtcywgcGxlYXNlIHJldmlldy4gIElmIGFueSBvZiB0aGVzZSBlcnJv
cnMKYXJlIGZhbHNlIHBvc2l0aXZlcyByZXBvcnQgdGhlbSB0byB0aGUgbWFpbnRhaW5lciwgc2Vl
CkNIRUNLUEFUQ0ggaW4gTUFJTlRBSU5FUlMuCjExLzMxIENoZWNraW5nIGNvbW1pdCAwMDk0OTRl
ZGRiMTAgKHNvZnRtbXU6IHNwbGl0IG9mZiB2bC5jOm1haW4oKSBpbnRvIG1haW4uYykKV0FSTklO
RzogYWRkZWQsIG1vdmVkIG9yIGRlbGV0ZWQgZmlsZShzKSwgZG9lcyBNQUlOVEFJTkVSUyBuZWVk
IHVwZGF0aW5nPwojNzE6IApuZXcgZmlsZSBtb2RlIDEwMDY0NAoKV0FSTklORzogYXJjaGl0ZWN0
dXJlIHNwZWNpZmljIGRlZmluZXMgc2hvdWxkIGJlIGF2b2lkZWQKIzEwNTogRklMRTogc29mdG1t
dS9tYWluLmM6MzA6CisjaWYgZGVmaW5lZChfX0FQUExFX18pIHx8IGRlZmluZWQobWFpbikKCnRv
dGFsOiAwIGVycm9ycywgMiB3YXJuaW5ncywgMTY0IGxpbmVzIGNoZWNrZWQKClBhdGNoIDExLzMx
IGhhcyBzdHlsZSBwcm9ibGVtcywgcGxlYXNlIHJldmlldy4gIElmIGFueSBvZiB0aGVzZSBlcnJv
cnMKYXJlIGZhbHNlIHBvc2l0aXZlcyByZXBvcnQgdGhlbSB0byB0aGUgbWFpbnRhaW5lciwgc2Vl
CkNIRUNLUEFUQ0ggaW4gTUFJTlRBSU5FUlMuCjEyLzMxIENoZWNraW5nIGNvbW1pdCA2NmI2OTM5
OGNhNWMgKG1vZHVsZTogY2hlY2sgbW9kdWxlIHdhc24ndCBhbHJlYWR5IGluaXRpYWxpemVkKQox
My8zMSBDaGVja2luZyBjb21taXQgMjY2YzJjNTFlZjk0IChmdXp6OiBhZGQgRlVaWl9UQVJHRVQg
bW9kdWxlIHR5cGUpCjE0LzMxIENoZWNraW5nIGNvbW1pdCBiY2MwODRiNzU1ODYgKHF0ZXN0OiBh
ZGQgcXRlc3Rfc2VydmVyX3NlbmQgYWJzdHJhY3Rpb24pCldBUk5JTkc6IGxpbmUgb3ZlciA4MCBj
aGFyYWN0ZXJzCiM3NzogRklMRTogcXRlc3QuYzo3OTc6Cit2b2lkIHF0ZXN0X3NlcnZlcl9zZXRf
c2VuZF9oYW5kbGVyKHZvaWQgKCpzZW5kKSh2b2lkKiwgY29uc3QgY2hhciopLCB2b2lkICpvcGFx
dWUpCgp0b3RhbDogMCBlcnJvcnMsIDEgd2FybmluZ3MsIDUwIGxpbmVzIGNoZWNrZWQKClBhdGNo
IDE0LzMxIGhhcyBzdHlsZSBwcm9ibGVtcywgcGxlYXNlIHJldmlldy4gIElmIGFueSBvZiB0aGVz
ZSBlcnJvcnMKYXJlIGZhbHNlIHBvc2l0aXZlcyByZXBvcnQgdGhlbSB0byB0aGUgbWFpbnRhaW5l
ciwgc2VlCkNIRUNLUEFUQ0ggaW4gTUFJTlRBSU5FUlMuCjE1LzMxIENoZWNraW5nIGNvbW1pdCA3
ODBkYTlmNWM1NGIgKGxpYnF0ZXN0OiBhZGQgYSBsYXllciBvZiBhYnN0cmFjdGlvbiB0byBzZW5k
L3JlY3YpCjE2LzMxIENoZWNraW5nIGNvbW1pdCAwYWRmYzMzOTAwZmUgKGxpYnF0ZXN0OiBtYWtl
IGJ1ZndyaXRlIHJlbHkgb24gdGhlIFRyYW5zcG9ydE9wcykKMTcvMzEgQ2hlY2tpbmcgY29tbWl0
IDRlYTkyZjJkYTY5MCAocXRlc3Q6IGFkZCBpbi1wcm9jZXNzIGluY29taW5nIGNvbW1hbmQgaGFu
ZGxlcikKMTgvMzEgQ2hlY2tpbmcgY29tbWl0IDRiY2ViMDExMTg5YSAobGlicW9zOiByZW5hbWUg
aTJjX3NlbmQgYW5kIGkyY19yZWN2KQoxOS8zMSBDaGVja2luZyBjb21taXQgZDdkYWFjNzQ2ODE0
IChsaWJxb3M6IHNwbGl0IHFvcy10ZXN0IGFuZCBsaWJxb3MgbWFrZWZpbGUgdmFycykKMjAvMzEg
Q2hlY2tpbmcgY29tbWl0IDQwOGRmMDc2ODQyMCAobGlicW9zOiBtb3ZlIHVzZWZ1bCBxb3MtdGVz
dCBmdW5jcyB0byBxb3NfZXh0ZXJuYWwpCldBUk5JTkc6IGFkZGVkLCBtb3ZlZCBvciBkZWxldGVk
IGZpbGUocyksIGRvZXMgTUFJTlRBSU5FUlMgbmVlZCB1cGRhdGluZz8KIzMyOiAKbmV3IGZpbGUg
bW9kZSAxMDA2NDQKCnRvdGFsOiAwIGVycm9ycywgMSB3YXJuaW5ncywgMzU3IGxpbmVzIGNoZWNr
ZWQKClBhdGNoIDIwLzMxIGhhcyBzdHlsZSBwcm9ibGVtcywgcGxlYXNlIHJldmlldy4gIElmIGFu
eSBvZiB0aGVzZSBlcnJvcnMKYXJlIGZhbHNlIHBvc2l0aXZlcyByZXBvcnQgdGhlbSB0byB0aGUg
bWFpbnRhaW5lciwgc2VlCkNIRUNLUEFUQ0ggaW4gTUFJTlRBSU5FUlMuCjIxLzMxIENoZWNraW5n
IGNvbW1pdCBlMjQzMTNmZjExYzcgKGZ1eno6IGFkZCBmdXp6ZXIgc2tlbGV0b24pCldBUk5JTkc6
IGFkZGVkLCBtb3ZlZCBvciBkZWxldGVkIGZpbGUocyksIGRvZXMgTUFJTlRBSU5FUlMgbmVlZCB1
cGRhdGluZz8KIzQxOiAKbmV3IGZpbGUgbW9kZSAxMDA2NDQKCnRvdGFsOiAwIGVycm9ycywgMSB3
YXJuaW5ncywgMjk0IGxpbmVzIGNoZWNrZWQKClBhdGNoIDIxLzMxIGhhcyBzdHlsZSBwcm9ibGVt
cywgcGxlYXNlIHJldmlldy4gIElmIGFueSBvZiB0aGVzZSBlcnJvcnMKYXJlIGZhbHNlIHBvc2l0
aXZlcyByZXBvcnQgdGhlbSB0byB0aGUgbWFpbnRhaW5lciwgc2VlCkNIRUNLUEFUQ0ggaW4gTUFJ
TlRBSU5FUlMuCjIyLzMxIENoZWNraW5nIGNvbW1pdCBlZDk0MWM3ZjRkOTggKGV4ZWM6IGtlZXAg
cmFtIGJsb2NrIGFjcm9zcyBmb3JrIHdoZW4gdXNpbmcgcXRlc3QpCjIzLzMxIENoZWNraW5nIGNv
bW1pdCA2YTI4NmVkNTIxYTUgKG1haW46IGtlZXAgcmN1X2F0Zm9yayBjYWxsYmFjayBlbmFibGVk
IGZvciBxdGVzdCkKMjQvMzEgQ2hlY2tpbmcgY29tbWl0IDg1MThjOGQ1MTNhZiAoZnV6ejogc3Vw
cG9ydCBmb3IgZm9yay1iYXNlZCBmdXp6aW5nLikKV0FSTklORzogYWRkZWQsIG1vdmVkIG9yIGRl
bGV0ZWQgZmlsZShzKSwgZG9lcyBNQUlOVEFJTkVSUyBuZWVkIHVwZGF0aW5nPwojNDM6IApuZXcg
ZmlsZSBtb2RlIDEwMDY0NAoKdG90YWw6IDAgZXJyb3JzLCAxIHdhcm5pbmdzLCAxMjUgbGluZXMg
Y2hlY2tlZAoKUGF0Y2ggMjQvMzEgaGFzIHN0eWxlIHByb2JsZW1zLCBwbGVhc2UgcmV2aWV3LiAg
SWYgYW55IG9mIHRoZXNlIGVycm9ycwphcmUgZmFsc2UgcG9zaXRpdmVzIHJlcG9ydCB0aGVtIHRv
IHRoZSBtYWludGFpbmVyLCBzZWUKQ0hFQ0tQQVRDSCBpbiBNQUlOVEFJTkVSUy4KMjUvMzEgQ2hl
Y2tpbmcgY29tbWl0IDdjNGQyZmJiMDk4NCAoZnV6ejogYWRkIHN1cHBvcnQgZm9yIHFvcy1hc3Np
c3RlZCBmdXp6IHRhcmdldHMpCldBUk5JTkc6IGFkZGVkLCBtb3ZlZCBvciBkZWxldGVkIGZpbGUo
cyksIGRvZXMgTUFJTlRBSU5FUlMgbmVlZCB1cGRhdGluZz8KIzMwOiAKbmV3IGZpbGUgbW9kZSAx
MDA2NDQKCldBUk5JTkc6IGxpbmUgb3ZlciA4MCBjaGFyYWN0ZXJzCiMxNTc6IEZJTEU6IHRlc3Rz
L3F0ZXN0L2Z1enovcW9zX2Z1enouYzoxMjM6CisgICAgLyogZXR5cGUgc2V0IHRvIFFFREdFX0NP
TlNVTUVEX0JZIHNvIHRoYXQgbWFjaGluZSBjYW4gYWRkIHRvIHRoZSBjb21tYW5kIGxpbmUgKi8K
CnRvdGFsOiAwIGVycm9ycywgMiB3YXJuaW5ncywgMjc3IGxpbmVzIGNoZWNrZWQKClBhdGNoIDI1
LzMxIGhhcyBzdHlsZSBwcm9ibGVtcywgcGxlYXNlIHJldmlldy4gIElmIGFueSBvZiB0aGVzZSBl
cnJvcnMKYXJlIGZhbHNlIHBvc2l0aXZlcyByZXBvcnQgdGhlbSB0byB0aGUgbWFpbnRhaW5lciwg
c2VlCkNIRUNLUEFUQ0ggaW4gTUFJTlRBSU5FUlMuCjI2LzMxIENoZWNraW5nIGNvbW1pdCBjM2Qy
MjQwZWFmN2IgKGZ1eno6IGFkZCB0YXJnZXQvZnV6eiBtYWtlZmlsZSBydWxlcykKMjcvMzEgQ2hl
Y2tpbmcgY29tbWl0IDQwODNkY2I2NGJjMSAoZnV6ejogYWRkIGNvbmZpZ3VyZSBmbGFnIC0tZW5h
YmxlLWZ1enppbmcpCjI4LzMxIENoZWNraW5nIGNvbW1pdCA2OWUxM2FkMDI1MzkgKGZ1eno6IGFk
ZCBpNDQwZnggZnV6eiB0YXJnZXRzKQpXQVJOSU5HOiBhZGRlZCwgbW92ZWQgb3IgZGVsZXRlZCBm
aWxlKHMpLCBkb2VzIE1BSU5UQUlORVJTIG5lZWQgdXBkYXRpbmc/CiMzNDogCm5ldyBmaWxlIG1v
ZGUgMTAwNjQ0Cgp0b3RhbDogMCBlcnJvcnMsIDEgd2FybmluZ3MsIDIwMiBsaW5lcyBjaGVja2Vk
CgpQYXRjaCAyOC8zMSBoYXMgc3R5bGUgcHJvYmxlbXMsIHBsZWFzZSByZXZpZXcuICBJZiBhbnkg
b2YgdGhlc2UgZXJyb3JzCmFyZSBmYWxzZSBwb3NpdGl2ZXMgcmVwb3J0IHRoZW0gdG8gdGhlIG1h
aW50YWluZXIsIHNlZQpDSEVDS1BBVENIIGluIE1BSU5UQUlORVJTLgoyOS8zMSBDaGVja2luZyBj
b21taXQgZTg4MDJmOTUxYTFjIChmdXp6OiBhZGQgdmlydGlvLW5ldCBmdXp6IHRhcmdldCkKV0FS
TklORzogYWRkZWQsIG1vdmVkIG9yIGRlbGV0ZWQgZmlsZShzKSwgZG9lcyBNQUlOVEFJTkVSUyBu
ZWVkIHVwZGF0aW5nPwojMzA6IApuZXcgZmlsZSBtb2RlIDEwMDY0NAoKdG90YWw6IDAgZXJyb3Jz
LCAxIHdhcm5pbmdzLCAyMDUgbGluZXMgY2hlY2tlZAoKUGF0Y2ggMjkvMzEgaGFzIHN0eWxlIHBy
b2JsZW1zLCBwbGVhc2UgcmV2aWV3LiAgSWYgYW55IG9mIHRoZXNlIGVycm9ycwphcmUgZmFsc2Ug
cG9zaXRpdmVzIHJlcG9ydCB0aGVtIHRvIHRoZSBtYWludGFpbmVyLCBzZWUKQ0hFQ0tQQVRDSCBp
biBNQUlOVEFJTkVSUy4KMzAvMzEgQ2hlY2tpbmcgY29tbWl0IDAwM2JiZDBmNGU0NCAoZnV6ejog
YWRkIHZpcnRpby1zY3NpIGZ1enogdGFyZ2V0KQpXQVJOSU5HOiBhZGRlZCwgbW92ZWQgb3IgZGVs
ZXRlZCBmaWxlKHMpLCBkb2VzIE1BSU5UQUlORVJTIG5lZWQgdXBkYXRpbmc/CiMzMDogCm5ldyBm
aWxlIG1vZGUgMTAwNjQ0Cgp0b3RhbDogMCBlcnJvcnMsIDEgd2FybmluZ3MsIDIyMCBsaW5lcyBj
aGVja2VkCgpQYXRjaCAzMC8zMSBoYXMgc3R5bGUgcHJvYmxlbXMsIHBsZWFzZSByZXZpZXcuICBJ
ZiBhbnkgb2YgdGhlc2UgZXJyb3JzCmFyZSBmYWxzZSBwb3NpdGl2ZXMgcmVwb3J0IHRoZW0gdG8g
dGhlIG1haW50YWluZXIsIHNlZQpDSEVDS1BBVENIIGluIE1BSU5UQUlORVJTLgozMS8zMSBDaGVj
a2luZyBjb21taXQgZGMzODJiMTU0ZjI1IChmdXp6OiBhZGQgZG9jdW1lbnRhdGlvbiB0byBkb2Nz
L2RldmVsLykKV0FSTklORzogYWRkZWQsIG1vdmVkIG9yIGRlbGV0ZWQgZmlsZShzKSwgZG9lcyBN
QUlOVEFJTkVSUyBuZWVkIHVwZGF0aW5nPwojMTU6IApuZXcgZmlsZSBtb2RlIDEwMDY0NAoKdG90
YWw6IDAgZXJyb3JzLCAxIHdhcm5pbmdzLCAxMTYgbGluZXMgY2hlY2tlZAoKUGF0Y2ggMzEvMzEg
aGFzIHN0eWxlIHByb2JsZW1zLCBwbGVhc2UgcmV2aWV3LiAgSWYgYW55IG9mIHRoZXNlIGVycm9y
cwphcmUgZmFsc2UgcG9zaXRpdmVzIHJlcG9ydCB0aGVtIHRvIHRoZSBtYWludGFpbmVyLCBzZWUK
Q0hFQ0tQQVRDSCBpbiBNQUlOVEFJTkVSUy4KPT09IE9VVFBVVCBFTkQgPT09CgpUZXN0IGNvbW1h
bmQgZXhpdGVkIHdpdGggY29kZTogMQoKClRoZSBmdWxsIGxvZyBpcyBhdmFpbGFibGUgYXQKaHR0
cDovL3BhdGNoZXcub3JnL2xvZ3MvMjAyMDAyMjIwODUwMzAuMTc2MDY0MC0xLXN0ZWZhbmhhQHJl
ZGhhdC5jb20vdGVzdGluZy5jaGVja3BhdGNoLz90eXBlPW1lc3NhZ2UuCi0tLQpFbWFpbCBnZW5l
cmF0ZWQgYXV0b21hdGljYWxseSBieSBQYXRjaGV3IFtodHRwczovL3BhdGNoZXcub3JnL10uClBs
ZWFzZSBzZW5kIHlvdXIgZmVlZGJhY2sgdG8gcGF0Y2hldy1kZXZlbEByZWRoYXQuY29t

