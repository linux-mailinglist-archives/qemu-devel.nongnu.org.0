Return-Path: <qemu-devel-bounces+lists+qemu-devel=lfdr.de@nongnu.org>
X-Original-To: lists+qemu-devel@lfdr.de
Delivered-To: lists+qemu-devel@lfdr.de
Received: from lists.gnu.org (lists.gnu.org [209.51.188.17])
	by mail.lfdr.de (Postfix) with ESMTPS id 205CE312A60
	for <lists+qemu-devel@lfdr.de>; Mon,  8 Feb 2021 07:03:29 +0100 (CET)
Received: from localhost ([::1]:55886 helo=lists1p.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.90_1)
	(envelope-from <qemu-devel-bounces+lists+qemu-devel=lfdr.de@nongnu.org>)
	id 1l8zdw-0002e6-3Q
	for lists+qemu-devel@lfdr.de; Mon, 08 Feb 2021 01:03:28 -0500
Received: from eggs.gnu.org ([2001:470:142:3::10]:56058)
 by lists.gnu.org with esmtps (TLS1.2:ECDHE_RSA_AES_256_GCM_SHA384:256)
 (Exim 4.90_1) (envelope-from <tsimpson@qualcomm.com>)
 id 1l8zOA-0007zS-QD
 for qemu-devel@nongnu.org; Mon, 08 Feb 2021 00:47:10 -0500
Received: from alexa-out-sd-02.qualcomm.com ([199.106.114.39]:35756)
 by eggs.gnu.org with esmtps (TLS1.2:RSA_AES_256_CBC_SHA1:256)
 (Exim 4.90_1) (envelope-from <tsimpson@qualcomm.com>)
 id 1l8zO7-0006RS-6z
 for qemu-devel@nongnu.org; Mon, 08 Feb 2021 00:47:10 -0500
DKIM-Signature: v=1; a=rsa-sha256; c=simple/simple;
 d=quicinc.com; i=@quicinc.com; q=dns/txt; s=qcdkim;
 t=1612763227; x=1644299227;
 h=from:to:cc:subject:date:message-id:in-reply-to:
 references:mime-version:content-transfer-encoding;
 bh=gsz7d1YE94eqRtUNBLpvqHH12suu8XY7TlOlNAUG2/8=;
 b=VkZOa+yF5w75mhnnrVz9CIFJY6G12vjJBb0Pvky7ph7B1dYcT8UsG/73
 uAgW/ctJfqIZ7OktpWDce9oKeBlr4DIW64gO1vCLR8mD88BUgdncee8ZI
 frrDR214QgwznsWyWFW1EITIAEC2yEvLlucAkILaGrqZ9+8ea7/BpbFVl 8=;
Received: from unknown (HELO ironmsg05-sd.qualcomm.com) ([10.53.140.145])
 by alexa-out-sd-02.qualcomm.com with ESMTP; 07 Feb 2021 21:46:31 -0800
X-QCInternal: smtphost
Received: from vu-tsimpson-aus.qualcomm.com (HELO
 vu-tsimpson1-aus.qualcomm.com) ([10.222.150.1])
 by ironmsg05-sd.qualcomm.com with ESMTP; 07 Feb 2021 21:46:30 -0800
Received: by vu-tsimpson1-aus.qualcomm.com (Postfix, from userid 47164)
 id 78E2040E7; Sun,  7 Feb 2021 23:46:30 -0600 (CST)
From: Taylor Simpson <tsimpson@quicinc.com>
To: qemu-devel@nongnu.org
Subject: [PATCH v8 23/35] Hexagon (target/hexagon) opcode data structures
Date: Sun,  7 Feb 2021 23:46:13 -0600
Message-Id: <1612763186-18161-24-git-send-email-tsimpson@quicinc.com>
X-Mailer: git-send-email 2.7.4
In-Reply-To: <1612763186-18161-1-git-send-email-tsimpson@quicinc.com>
References: <1612763186-18161-1-git-send-email-tsimpson@quicinc.com>
MIME-Version: 1.0
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: base64
Received-SPF: pass client-ip=199.106.114.39;
 envelope-from=tsimpson@qualcomm.com; helo=alexa-out-sd-02.qualcomm.com
X-Spam_score_int: -40
X-Spam_score: -4.1
X-Spam_bar: ----
X-Spam_report: (-4.1 / 5.0 requ) BAYES_00=-1.9, DKIM_SIGNED=0.1,
 DKIM_VALID=-0.1, DKIM_VALID_AU=-0.1, HEADER_FROM_DIFFERENT_DOMAINS=0.248,
 RCVD_IN_DNSWL_MED=-2.3, SPF_HELO_NONE=0.001,
 SPF_PASS=-0.001 autolearn=ham autolearn_force=no
X-Spam_action: no action
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.23
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
 <mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <https://lists.nongnu.org/archive/html/qemu-devel>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
 <mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: ale@rev.ng, bcain@quicinc.com, philmd@redhat.com,
 richard.henderson@linaro.org, laurent@vivier.eu, tsimpson@quicinc.com,
 alex.bennee@linaro.org
Errors-To: qemu-devel-bounces+lists+qemu-devel=lfdr.de@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+lists+qemu-devel=lfdr.de@nongnu.org>

U2lnbmVkLW9mZi1ieTogVGF5bG9yIFNpbXBzb24gPHRzaW1wc29uQHF1aWNpbmMuY29tPgotLS0K
IHRhcmdldC9oZXhhZ29uL29wY29kZXMuaCB8ICA1OCArKysrKysrKysrKysrKysrKysrCiB0YXJn
ZXQvaGV4YWdvbi9vcGNvZGVzLmMgfCAxNDIgKysrKysrKysrKysrKysrKysrKysrKysrKysrKysr
KysrKysrKysrKysrKysrKysKIDIgZmlsZXMgY2hhbmdlZCwgMjAwIGluc2VydGlvbnMoKykKIGNy
ZWF0ZSBtb2RlIDEwMDY0NCB0YXJnZXQvaGV4YWdvbi9vcGNvZGVzLmgKIGNyZWF0ZSBtb2RlIDEw
MDY0NCB0YXJnZXQvaGV4YWdvbi9vcGNvZGVzLmMKCmRpZmYgLS1naXQgYS90YXJnZXQvaGV4YWdv
bi9vcGNvZGVzLmggYi90YXJnZXQvaGV4YWdvbi9vcGNvZGVzLmgKbmV3IGZpbGUgbW9kZSAxMDA2
NDQKaW5kZXggMDAwMDAwMC4uNmU5MGUwMAotLS0gL2Rldi9udWxsCisrKyBiL3RhcmdldC9oZXhh
Z29uL29wY29kZXMuaApAQCAtMCwwICsxLDU4IEBACisvKgorICogIENvcHlyaWdodChjKSAyMDE5
LTIwMjEgUXVhbGNvbW0gSW5ub3ZhdGlvbiBDZW50ZXIsIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZl
ZC4KKyAqCisgKiAgVGhpcyBwcm9ncmFtIGlzIGZyZWUgc29mdHdhcmU7IHlvdSBjYW4gcmVkaXN0
cmlidXRlIGl0IGFuZC9vciBtb2RpZnkKKyAqICBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdO
VSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieQorICogIHRoZSBGcmVlIFNv
ZnR3YXJlIEZvdW5kYXRpb247IGVpdGhlciB2ZXJzaW9uIDIgb2YgdGhlIExpY2Vuc2UsIG9yCisg
KiAgKGF0IHlvdXIgb3B0aW9uKSBhbnkgbGF0ZXIgdmVyc2lvbi4KKyAqCisgKiAgVGhpcyBwcm9n
cmFtIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsCisg
KiAgYnV0IFdJVEhPVVQgQU5ZIFdBUlJBTlRZOyB3aXRob3V0IGV2ZW4gdGhlIGltcGxpZWQgd2Fy
cmFudHkgb2YKKyAqICBNRVJDSEFOVEFCSUxJVFkgb3IgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFS
IFBVUlBPU0UuICBTZWUgdGhlCisgKiAgR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1v
cmUgZGV0YWlscy4KKyAqCisgKiAgWW91IHNob3VsZCBoYXZlIHJlY2VpdmVkIGEgY29weSBvZiB0
aGUgR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UKKyAqICBhbG9uZyB3aXRoIHRoaXMgcHJvZ3Jh
bTsgaWYgbm90LCBzZWUgPGh0dHA6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy8+LgorICovCisKKyNp
Zm5kZWYgSEVYQUdPTl9PUENPREVTX0gKKyNkZWZpbmUgSEVYQUdPTl9PUENPREVTX0gKKwordHlw
ZWRlZiBlbnVtIHsKKyNkZWZpbmUgT1BDT0RFKElJRCkgSUlECisjaW5jbHVkZSAib3Bjb2Rlc19k
ZWZfZ2VuZXJhdGVkLmguaW5jIgorICAgIFhYX0xBU1RfT1BDT0RFCisjdW5kZWYgT1BDT0RFCit9
IE9wY29kZTsKKwordHlwZWRlZiBlbnVtIHsKKyAgICBOT1JNQUwsCisgICAgSEFMRiwKKyAgICBT
VUJJTlNOX0EsCisgICAgU1VCSU5TTl9MMSwKKyAgICBTVUJJTlNOX0wyLAorICAgIFNVQklOU05f
UzEsCisgICAgU1VCSU5TTl9TMiwKKyAgICBFWFRfbm9leHQsCisgICAgRVhUX21tdmVjLAorICAg
IFhYX0xBU1RfRU5DX0NMQVNTCit9IEVuY0NsYXNzOworCitleHRlcm4gY29uc3QgY2hhciAqIGNv
bnN0IG9wY29kZV9uYW1lc1tdOworCitleHRlcm4gY29uc3QgY2hhciAqIGNvbnN0IG9wY29kZV9y
ZWdpbmZvW107CitleHRlcm4gY29uc3QgY2hhciAqIGNvbnN0IG9wY29kZV9ycmVnc1tdOworZXh0
ZXJuIGNvbnN0IGNoYXIgKiBjb25zdCBvcGNvZGVfd3JlZ3NbXTsKKwordHlwZWRlZiBzdHJ1Y3Qg
eworICAgIGNvbnN0IGNoYXIgKiBjb25zdCBlbmNvZGluZzsKKyAgICBjb25zdCBFbmNDbGFzcyBl
bmNfY2xhc3M7Cit9IE9wY29kZUVuY29kaW5nOworCitleHRlcm4gY29uc3QgT3Bjb2RlRW5jb2Rp
bmcgb3Bjb2RlX2VuY29kaW5nc1tYWF9MQVNUX09QQ09ERV07CisKK3ZvaWQgb3Bjb2RlX2luaXQo
dm9pZCk7CisKK2ludCBvcGNvZGVfd2hpY2hfaW1tZWRpYXRlX2lzX2V4dGVuZGVkKE9wY29kZSBv
cGNvZGUpOworCisjZW5kaWYKZGlmZiAtLWdpdCBhL3RhcmdldC9oZXhhZ29uL29wY29kZXMuYyBi
L3RhcmdldC9oZXhhZ29uL29wY29kZXMuYwpuZXcgZmlsZSBtb2RlIDEwMDY0NAppbmRleCAwMDAw
MDAwLi40ZWVmNWZjCi0tLSAvZGV2L251bGwKKysrIGIvdGFyZ2V0L2hleGFnb24vb3Bjb2Rlcy5j
CkBAIC0wLDAgKzEsMTQyIEBACisvKgorICogIENvcHlyaWdodChjKSAyMDE5LTIwMjEgUXVhbGNv
bW0gSW5ub3ZhdGlvbiBDZW50ZXIsIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC4KKyAqCisgKiAg
VGhpcyBwcm9ncmFtIGlzIGZyZWUgc29mdHdhcmU7IHlvdSBjYW4gcmVkaXN0cmlidXRlIGl0IGFu
ZC9vciBtb2RpZnkKKyAqICBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBHZW5lcmFsIFB1
YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieQorICogIHRoZSBGcmVlIFNvZnR3YXJlIEZvdW5k
YXRpb247IGVpdGhlciB2ZXJzaW9uIDIgb2YgdGhlIExpY2Vuc2UsIG9yCisgKiAgKGF0IHlvdXIg
b3B0aW9uKSBhbnkgbGF0ZXIgdmVyc2lvbi4KKyAqCisgKiAgVGhpcyBwcm9ncmFtIGlzIGRpc3Ry
aWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsCisgKiAgYnV0IFdJVEhP
VVQgQU5ZIFdBUlJBTlRZOyB3aXRob3V0IGV2ZW4gdGhlIGltcGxpZWQgd2FycmFudHkgb2YKKyAq
ICBNRVJDSEFOVEFCSUxJVFkgb3IgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UuICBT
ZWUgdGhlCisgKiAgR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy4K
KyAqCisgKiAgWW91IHNob3VsZCBoYXZlIHJlY2VpdmVkIGEgY29weSBvZiB0aGUgR05VIEdlbmVy
YWwgUHVibGljIExpY2Vuc2UKKyAqICBhbG9uZyB3aXRoIHRoaXMgcHJvZ3JhbTsgaWYgbm90LCBz
ZWUgPGh0dHA6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy8+LgorICovCisKKy8qCisgKiBvcGNvZGVz
LmMKKyAqCisgKiBkYXRhIHRhYmxlcyBnZW5lcmF0ZWQgYXV0b21hdGljYWxseQorICogTWF5YmUg
c29tZSBmdW5jdGlvbnMgdG9vCisgKi8KKworI2luY2x1ZGUgInFlbXUvb3NkZXAuaCIKKyNpbmNs
dWRlICJhdHRyaWJzLmgiCisjaW5jbHVkZSAiZGVjb2RlLmgiCisKKyNkZWZpbmUgVkVDX0RFU0NS
KEEsIEIsIEMpIERFU0NSKEEsIEIsIEMpCisjZGVmaW5lIERPTkFNRShYKSAjWAorCitjb25zdCBj
aGFyICogY29uc3Qgb3Bjb2RlX25hbWVzW10gPSB7CisjZGVmaW5lIE9QQ09ERShJSUQpIERPTkFN
RShJSUQpCisjaW5jbHVkZSAib3Bjb2Rlc19kZWZfZ2VuZXJhdGVkLmguaW5jIgorICAgIE5VTEwK
KyN1bmRlZiBPUENPREUKK307CisKK2NvbnN0IGNoYXIgKiBjb25zdCBvcGNvZGVfcmVnaW5mb1td
ID0geworI2RlZmluZSBJTU1JTkZPKFRBRywgU0lHTiwgU0laRSwgU0hBTVQsIFNJR04yLCBTSVpF
MiwgU0hBTVQyKSAgICAvKiBub3RoaW5nICovCisjZGVmaW5lIFJFR0lORk8oVEFHLCBSRUdJTkZP
LCBSUkVHUywgV1JFR1MpIFJFR0lORk8sCisjaW5jbHVkZSAib3BfcmVnc19nZW5lcmF0ZWQuaC5p
bmMiCisgICAgTlVMTAorI3VuZGVmIFJFR0lORk8KKyN1bmRlZiBJTU1JTkZPCit9OworCisKK2Nv
bnN0IGNoYXIgKiBjb25zdCBvcGNvZGVfcnJlZ3NbXSA9IHsKKyNkZWZpbmUgSU1NSU5GTyhUQUcs
IFNJR04sIFNJWkUsIFNIQU1ULCBTSUdOMiwgU0laRTIsIFNIQU1UMikgICAgLyogbm90aGluZyAq
LworI2RlZmluZSBSRUdJTkZPKFRBRywgUkVHSU5GTywgUlJFR1MsIFdSRUdTKSBSUkVHUywKKyNp
bmNsdWRlICJvcF9yZWdzX2dlbmVyYXRlZC5oLmluYyIKKyAgICBOVUxMCisjdW5kZWYgUkVHSU5G
TworI3VuZGVmIElNTUlORk8KK307CisKKworY29uc3QgY2hhciAqIGNvbnN0IG9wY29kZV93cmVn
c1tdID0geworI2RlZmluZSBJTU1JTkZPKFRBRywgU0lHTiwgU0laRSwgU0hBTVQsIFNJR04yLCBT
SVpFMiwgU0hBTVQyKSAgICAvKiBub3RoaW5nICovCisjZGVmaW5lIFJFR0lORk8oVEFHLCBSRUdJ
TkZPLCBSUkVHUywgV1JFR1MpIFdSRUdTLAorI2luY2x1ZGUgIm9wX3JlZ3NfZ2VuZXJhdGVkLmgu
aW5jIgorICAgIE5VTEwKKyN1bmRlZiBSRUdJTkZPCisjdW5kZWYgSU1NSU5GTworfTsKKworY29u
c3QgY2hhciAqIGNvbnN0IG9wY29kZV9zaG9ydF9zZW1hbnRpY3NbXSA9IHsKKyNkZWZpbmUgREVG
X1NIT1JUQ09ERShUQUcsIFNIT1JUQ09ERSkgICAgICAgICAgICAgIFtUQUddID0gI1NIT1JUQ09E
RSwKKyNpbmNsdWRlICJzaG9ydGNvZGVfZ2VuZXJhdGVkLmguaW5jIgorI3VuZGVmIERFRl9TSE9S
VENPREUKKyAgICBOVUxMCit9OworCitERUNMQVJFX0JJVE1BUChvcGNvZGVfYXR0cmlic1tYWF9M
QVNUX09QQ09ERV0sIEFfWlpfTEFTVEFUVFJJQik7CisKK3N0YXRpYyB2b2lkIGluaXRfYXR0cmli
cyhpbnQgdGFnLCAuLi4pCit7CisgICAgdmFfbGlzdCBhcDsKKyAgICBpbnQgYXR0cjsKKyAgICB2
YV9zdGFydChhcCwgdGFnKTsKKyAgICB3aGlsZSAoKGF0dHIgPSB2YV9hcmcoYXAsIGludCkpICE9
IDApIHsKKyAgICAgICAgc2V0X2JpdChhdHRyLCBvcGNvZGVfYXR0cmlic1t0YWddKTsKKyAgICB9
Cit9CisKK2NvbnN0IE9wY29kZUVuY29kaW5nIG9wY29kZV9lbmNvZGluZ3NbXSA9IHsKKyNkZWZp
bmUgREVGX0VOQzMyKE9QQ09ERSwgRU5DU1RSKSBcCisgICAgW09QQ09ERV0gPSB7IC5lbmNvZGlu
ZyA9IEVOQ1NUUiB9LAorCisjZGVmaW5lIERFRl9FTkNfU1VCSU5TTihPUENPREUsIENMQVNTLCBF
TkNTVFIpIFwKKyAgICBbT1BDT0RFXSA9IHsgLmVuY29kaW5nID0gRU5DU1RSLCAuZW5jX2NsYXNz
ID0gQ0xBU1MgfSwKKworI2RlZmluZSBERUZfRVhUX0VOQyhPUENPREUsIENMQVNTLCBFTkNTVFIp
IFwKKyAgICBbT1BDT0RFXSA9IHsgLmVuY29kaW5nID0gRU5DU1RSLCAuZW5jX2NsYXNzID0gQ0xB
U1MgfSwKKworI2luY2x1ZGUgImltcG9ydGVkL2VuY29kZS5kZWYiCisKKyN1bmRlZiBERUZfRU5D
MzIKKyN1bmRlZiBERUZfRU5DX1NVQklOU04KKyN1bmRlZiBERUZfRVhUX0VOQworfTsKKwordm9p
ZCBvcGNvZGVfaW5pdCh2b2lkKQoreworICAgIGluaXRfYXR0cmlicygwLCAwKTsKKworI2RlZmlu
ZSBBVFRSSUJTKC4uLikgLCAjIyBfX1ZBX0FSR1NfXywgMAorI2RlZmluZSBPUF9BVFRSSUIoVEFH
LCBBUkdTKSBpbml0X2F0dHJpYnMoVEFHIEFSR1MpOworI2luY2x1ZGUgIm9wX2F0dHJpYnNfZ2Vu
ZXJhdGVkLmguaW5jIgorI3VuZGVmIE9QX0FUVFJJQgorI3VuZGVmIEFUVFJJQlMKKworICAgIGRl
Y29kZV9pbml0KCk7Cit9CisKKworI2RlZmluZSBORUVETEUgIklNTUVYVCgiCisKK2ludCBvcGNv
ZGVfd2hpY2hfaW1tZWRpYXRlX2lzX2V4dGVuZGVkKE9wY29kZSBvcGNvZGUpCit7CisgICAgY29u
c3QgY2hhciAqcDsKKworICAgIGdfYXNzZXJ0KG9wY29kZSA8IFhYX0xBU1RfT1BDT0RFKTsKKyAg
ICBnX2Fzc2VydChHRVRfQVRUUklCKG9wY29kZSwgQV9FWFRFTkRBQkxFKSk7CisKKyAgICBwID0g
b3Bjb2RlX3Nob3J0X3NlbWFudGljc1tvcGNvZGVdOworICAgIHAgPSBzdHJzdHIocCwgTkVFRExF
KTsKKyAgICBnX2Fzc2VydChwKTsKKyAgICBwICs9IHN0cmxlbihORUVETEUpOworICAgIHdoaWxl
IChpc3NwYWNlKCpwKSkgeworICAgICAgICBwKys7CisgICAgfQorICAgIC8qIGxvd2VyIGlzIGFs
d2F5cyBpbW0gMCwgdXBwZXIgYWx3YXlzIGltbSAxLiAqLworICAgIGlmIChpc2xvd2VyKCpwKSkg
eworICAgICAgICByZXR1cm4gMDsKKyAgICB9IGVsc2UgaWYgKGlzdXBwZXIoKnApKSB7CisgICAg
ICAgIHJldHVybiAxOworICAgIH0gZWxzZSB7CisgICAgICAgIGdfYXNzZXJ0X25vdF9yZWFjaGVk
KCk7CisgICAgfQorfQotLSAKMi43LjQKCg==

