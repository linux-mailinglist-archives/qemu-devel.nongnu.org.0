Return-Path: <qemu-devel-bounces+lists+qemu-devel=lfdr.de@nongnu.org>
X-Original-To: lists+qemu-devel@lfdr.de
Delivered-To: lists+qemu-devel@lfdr.de
Received: from lists.gnu.org (lists.gnu.org [209.51.188.17])
	by mail.lfdr.de (Postfix) with ESMTPS id DA8EE214D20
	for <lists+qemu-devel@lfdr.de>; Sun,  5 Jul 2020 16:30:35 +0200 (CEST)
Received: from localhost ([::1]:34910 helo=lists1p.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.90_1)
	(envelope-from <qemu-devel-bounces+lists+qemu-devel=lfdr.de@nongnu.org>)
	id 1js5f8-0000nu-Cy
	for lists+qemu-devel@lfdr.de; Sun, 05 Jul 2020 10:30:34 -0400
Received: from eggs.gnu.org ([2001:470:142:3::10]:60142)
 by lists.gnu.org with esmtps (TLS1.2:ECDHE_RSA_AES_256_GCM_SHA384:256)
 (Exim 4.90_1) (envelope-from <no-reply@patchew.org>)
 id 1js5e5-0008E1-Ta
 for qemu-devel@nongnu.org; Sun, 05 Jul 2020 10:29:29 -0400
Resent-Date: Sun, 05 Jul 2020 10:29:29 -0400
Resent-Message-Id: <E1js5e5-0008E1-Ta@lists.gnu.org>
Received: from sender4-of-o57.zoho.com ([136.143.188.57]:21723)
 by eggs.gnu.org with esmtps (TLS1.2:ECDHE_RSA_AES_256_CBC_SHA1:256)
 (Exim 4.90_1) (envelope-from <no-reply@patchew.org>)
 id 1js5e2-0005JE-PQ
 for qemu-devel@nongnu.org; Sun, 05 Jul 2020 10:29:29 -0400
ARC-Seal: i=1; a=rsa-sha256; t=1593959349; cv=none; 
 d=zohomail.com; s=zohoarc; 
 b=mEhVzdCnP2ZcLiMCIeGn5jQjOANkaRcZPs2ktg/4h19d4oWoY3TsLkJt+105mLugkYffZ1xiAO2pMX4ZWQUnrk2XYPWgaFOlrhtreBS5tAMtgLrRwVAMBJLZ9LuOaJ/fxmT7q+HIa/soWn58XCeuX2wrLRSf5R1pV3P4tY6umGY=
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=zohomail.com;
 s=zohoarc; t=1593959349;
 h=Content-Type:Content-Transfer-Encoding:Cc:Date:From:In-Reply-To:MIME-Version:Message-ID:Reply-To:Subject:To;
 bh=UZ+h4hswXqKk+HljLHHjW3SBeQTzYz2jQFLNn2YsEyI=; 
 b=CYB/pt3ehJkh86IH309U1Q9Z73qsGwMYQjzExnycNtesQwon9jxvl4AzxanOS0j30F4xIW292HeDiB6M1bEmqvFtJlCtnLPOGRa7wRri8rlTiNvzf+g6OjiAxp9MK4lF6FK0hz3id24k3Uemjth4uIDG96CL6H7HTCgctON2f38=
ARC-Authentication-Results: i=1; mx.zohomail.com;
 spf=pass  smtp.mailfrom=no-reply@patchew.org;
 dmarc=pass header.from=<no-reply@patchew.org>
 header.from=<no-reply@patchew.org>
Received: from [172.17.0.3] (23.253.156.214 [23.253.156.214]) by
 mx.zohomail.com with SMTPS id 1593959346091649.4068242848315;
 Sun, 5 Jul 2020 07:29:06 -0700 (PDT)
Message-ID: <159395934458.22113.4571211972557020419@d1fd068a5071>
Subject: Re: [PATCH rc6 00/30] target/avr merger
In-Reply-To: <20200705140315.260514-1-huth@tuxfamily.org>
MIME-Version: 1.0
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: base64
Resent-From: 
From: no-reply@patchew.org
To: huth@tuxfamily.org
Date: Sun, 5 Jul 2020 07:29:06 -0700 (PDT)
X-ZohoMailClient: External
Received-SPF: pass client-ip=136.143.188.57; envelope-from=no-reply@patchew.org;
 helo=sender4-of-o57.zoho.com
X-detected-operating-system: by eggs.gnu.org: First seen = 2020/07/05 10:29:23
X-ACL-Warn: Detected OS   = Linux 3.11 and newer [fuzzy]
X-Spam_score_int: -18
X-Spam_score: -1.9
X-Spam_bar: -
X-Spam_report: (-1.9 / 5.0 requ) BAYES_00=-1.9, RCVD_IN_DNSWL_NONE=-0.0001,
 RCVD_IN_MSPIKE_H3=-0.01, RCVD_IN_MSPIKE_WL=-0.01, SPF_HELO_NONE=0.001,
 SPF_PASS=-0.001, URIBL_BLOCKED=0.001 autolearn=_AUTOLEARN
X-Spam_action: no action
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.23
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
 <mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <https://lists.nongnu.org/archive/html/qemu-devel>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
 <mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Reply-To: qemu-devel@nongnu.org
Cc: S.E.Harris@kent.ac.uk, rth@twiddle.net, mrolnik@gmail.com,
 qemu-devel@nongnu.org, f4bug@amsat.org
Errors-To: qemu-devel-bounces+lists+qemu-devel=lfdr.de@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+lists+qemu-devel=lfdr.de@nongnu.org>

UGF0Y2hldyBVUkw6IGh0dHBzOi8vcGF0Y2hldy5vcmcvUUVNVS8yMDIwMDcwNTE0MDMxNS4yNjA1
MTQtMS1odXRoQHR1eGZhbWlseS5vcmcvCgoKCkhpLAoKVGhpcyBzZXJpZXMgc2VlbXMgdG8gaGF2
ZSBzb21lIGNvZGluZyBzdHlsZSBwcm9ibGVtcy4gU2VlIG91dHB1dCBiZWxvdyBmb3IKbW9yZSBp
bmZvcm1hdGlvbjoKClN1YmplY3Q6IFtQQVRDSCByYzYgMDAvMzBdIHRhcmdldC9hdnIgbWVyZ2Vy
ClR5cGU6IHNlcmllcwpNZXNzYWdlLWlkOiAyMDIwMDcwNTE0MDMxNS4yNjA1MTQtMS1odXRoQHR1
eGZhbWlseS5vcmcKCj09PSBURVNUIFNDUklQVCBCRUdJTiA9PT0KIyEvYmluL2Jhc2gKZ2l0IHJl
di1wYXJzZSBiYXNlID4gL2Rldi9udWxsIHx8IGV4aXQgMApnaXQgY29uZmlnIC0tbG9jYWwgZGlm
Zi5yZW5hbWVsaW1pdCAwCmdpdCBjb25maWcgLS1sb2NhbCBkaWZmLnJlbmFtZXMgVHJ1ZQpnaXQg
Y29uZmlnIC0tbG9jYWwgZGlmZi5hbGdvcml0aG0gaGlzdG9ncmFtCi4vc2NyaXB0cy9jaGVja3Bh
dGNoLnBsIC0tbWFpbGJhY2sgYmFzZS4uCj09PSBURVNUIFNDUklQVCBFTkQgPT09CgpVcGRhdGlu
ZyAzYzhjZjVhOWMyMWZmODc4MjE2NGQxZGVmN2Y0NGJkODg4NzEzMzg0CkZyb20gaHR0cHM6Ly9n
aXRodWIuY29tL3BhdGNoZXctcHJvamVjdC9xZW11CiAtIFt0YWcgdXBkYXRlXSAgICAgIHBhdGNo
ZXcvMjAyMDA3MDMxODQ5NTIuNDkxOC0xLWY0YnVnQGFtc2F0Lm9yZyAtPiBwYXRjaGV3LzIwMjAw
NzAzMTg0OTUyLjQ5MTgtMS1mNGJ1Z0BhbXNhdC5vcmcKIC0gW3RhZyB1cGRhdGVdICAgICAgcGF0
Y2hldy8yMDIwMDcwMzIwMDQ1OS4yMzI5NC0xLWY0YnVnQGFtc2F0Lm9yZyAtPiBwYXRjaGV3LzIw
MjAwNzAzMjAwNDU5LjIzMjk0LTEtZjRidWdAYW1zYXQub3JnCiAtIFt0YWcgdXBkYXRlXSAgICAg
IHBhdGNoZXcvMjAyMDA3MDQxNTM5MDguMTIxMTgtMS1waGlsbWRAcmVkaGF0LmNvbSAtPiBwYXRj
aGV3LzIwMjAwNzA0MTUzOTA4LjEyMTE4LTEtcGhpbG1kQHJlZGhhdC5jb20KICogW25ldyB0YWdd
ICAgICAgICAgcGF0Y2hldy8yMDIwMDcwNTE0MDMxNS4yNjA1MTQtMS1odXRoQHR1eGZhbWlseS5v
cmcgLT4gcGF0Y2hldy8yMDIwMDcwNTE0MDMxNS4yNjA1MTQtMS1odXRoQHR1eGZhbWlseS5vcmcK
U3dpdGNoZWQgdG8gYSBuZXcgYnJhbmNoICd0ZXN0JwpmYWFkNzc1IHRhcmdldC9hdnI6IEFkZCBz
ZWN0aW9uIGludG8gUUVNVSBkb2N1bWVudGF0aW9uCjg4NTc2MTUgdGVzdHMvYWNjZXB0YW5jZTog
VGVzdCB0aGUgQXJkdWlubyBNRUdBMjU2MCBib2FyZApiNTY0NjgyIHRlc3RzL2Jvb3Qtc2VyaWFs
OiBUZXN0IHNvbWUgQXJkdWlubyBib2FyZHMgKEFWUiBiYXNlZCkKZDVlNDY5OSB0ZXN0cy9tYWNo
aW5lLW5vbmU6IEFkZCBBVlIgc3VwcG9ydApiYmExZTM0IHRhcmdldC9hdnI6IFVwZGF0ZSBidWls
ZCBzeXN0ZW0KMjlkZDI5YyBody9hdnI6IEFkZCBsaW1pdGVkIHN1cHBvcnQgZm9yIHNvbWUgQXJk
dWlubyBib2FyZHMKM2QxNjQwZiBody9hdnI6IEFkZCBzb21lIEFUbWVnYSBtaWNyb2NvbnRyb2xs
ZXJzCjQzYjQ3YTEgaHcvYXZyOiBBZGQgc3VwcG9ydCBmb3IgbG9hZGluZyBFTEYvcmF3IGJpbmFy
aWVzCjFhZTRkOWUgdGFyZ2V0L2F2cjogUmVnaXN0ZXIgQVZSIHN1cHBvcnQgd2l0aCB0aGUgcmVz
dCBvZiBRRU1VCmE1MjNhYTggaHcvbWlzYzogYXZyOiBBZGQgbGltaXRlZCBzdXBwb3J0IGZvciBw
b3dlciByZWR1Y3Rpb24gZGV2aWNlCmQ2NzNlNGEgaHcvdGltZXI6IGF2cjogQWRkIGxpbWl0ZWQg
c3VwcG9ydCBmb3IgMTYtYml0IHRpbWVyIHBlcmlwaGVyYWwKM2NiNWUzMSBody9jaGFyOiBhdnI6
IEFkZCBsaW1pdGVkIHN1cHBvcnQgZm9yIFVTQVJUIHBlcmlwaGVyYWwKODFlZjhlZiB0YXJnZXQv
YXZyOiBBZGQgc3VwcG9ydCBmb3IgZGlzYXNzZW1ibGluZyB2aWEgb3B0aW9uICctZCBpbl9hc20n
CmUyYzdhNDcgdGFyZ2V0L2F2cjogSW5pdGlhbGl6ZSBUQ0cgcmVnaXN0ZXIgdmFyaWFibGVzCjMx
NzkzZjUgdGFyZ2V0L2F2cjogQWRkIGluc3RydWN0aW9uIHRyYW5zbGF0aW9uIC0gQ1BVIG1haW4g
dHJhbnNsYXRpb24gZnVuY3Rpb24KMDNiMGIxZSB0YXJnZXQvYXZyOiBBZGQgaW5zdHJ1Y3Rpb24g
dHJhbnNsYXRpb24gLSBNQ1UgQ29udHJvbCBJbnN0cnVjdGlvbnMKZGQyNjI5OSB0YXJnZXQvYXZy
OiBBZGQgaW5zdHJ1Y3Rpb24gdHJhbnNsYXRpb24gLSBCaXQgYW5kIEJpdC10ZXN0IEluc3RydWN0
aW9ucwpjZjNkYmZkIHRhcmdldC9hdnI6IEFkZCBpbnN0cnVjdGlvbiB0cmFuc2xhdGlvbiAtIERh
dGEgVHJhbnNmZXIgSW5zdHJ1Y3Rpb25zCjIyZDQ2NTEgdGFyZ2V0L2F2cjogQWRkIGluc3RydWN0
aW9uIHRyYW5zbGF0aW9uIC0gQnJhbmNoIEluc3RydWN0aW9ucwoxMjBhOTU2IHRhcmdldC9hdnI6
IEFkZCBpbnN0cnVjdGlvbiB0cmFuc2xhdGlvbiAtIEFyaXRobWV0aWMgYW5kIExvZ2ljIEluc3Ry
dWN0aW9ucwoyOGE5MWVhIHRhcmdldC9hdnI6IEFkZCBpbnN0cnVjdGlvbiB0cmFuc2xhdGlvbiAt
IFJlZ2lzdGVyIGRlZmluaXRpb25zCmI2MWI1MTQgdGFyZ2V0L2F2cjogQWRkIGluc3RydWN0aW9u
IGhlbHBlcnMKNzQwODljOSB0YXJnZXQvYXZyOiBBZGQgZGVmaW50aW9ucyBvZiBBVlIgY29yZSB0
eXBlcwo5YzdlNjc1IHRhcmdldC9hdnI6IEludHJvZHVjZSBlbnVtZXJhdGlvbiBBVlJGZWF0dXJl
CjFmZDgyZDQgdGFyZ2V0L2F2cjogQ1BVIGNsYXNzOiBBZGQgR0RCIHN1cHBvcnQKM2M3ODhjNyB0
YXJnZXQvYXZyOiBDUFUgY2xhc3M6IEFkZCBtaWdyYXRpb24gc3VwcG9ydApjYjcyMTY5IHRhcmdl
dC9hdnI6IENQVSBjbGFzczogQWRkIG1lbW9yeSBtZW5hZ2VtZW50IHN1cHBvcnQKMDc1OGNhMSB0
YXJnZXQvYXZyOiBDUFUgY2xhc3M6IEFkZCBpbnRlcnJ1cHQgaGFuZGxpbmcgc3VwcG9ydApiZjkz
OGI3IHRhcmdldC9hdnI6IEludHJvZHVjZSBiYXNpYyBDUFUgY2xhc3Mgb2JqZWN0CmI1ZTMxMTYg
dGFyZ2V0L2F2cjogQWRkIGJhc2ljIHBhcmFtZXRlcnMgb2YgdGhlIG5ldyBwbGF0Zm9ybQoKPT09
IE9VVFBVVCBCRUdJTiA9PT0KMS8zMCBDaGVja2luZyBjb21taXQgYjVlMzExNmEzNTkxICh0YXJn
ZXQvYXZyOiBBZGQgYmFzaWMgcGFyYW1ldGVycyBvZiB0aGUgbmV3IHBsYXRmb3JtKQpXQVJOSU5H
OiBhZGRlZCwgbW92ZWQgb3IgZGVsZXRlZCBmaWxlKHMpLCBkb2VzIE1BSU5UQUlORVJTIG5lZWQg
dXBkYXRpbmc/CiM0MjogCm5ldyBmaWxlIG1vZGUgMTAwNjQ0Cgp0b3RhbDogMCBlcnJvcnMsIDEg
d2FybmluZ3MsIDExNSBsaW5lcyBjaGVja2VkCgpQYXRjaCAxLzMwIGhhcyBzdHlsZSBwcm9ibGVt
cywgcGxlYXNlIHJldmlldy4gIElmIGFueSBvZiB0aGVzZSBlcnJvcnMKYXJlIGZhbHNlIHBvc2l0
aXZlcyByZXBvcnQgdGhlbSB0byB0aGUgbWFpbnRhaW5lciwgc2VlCkNIRUNLUEFUQ0ggaW4gTUFJ
TlRBSU5FUlMuCjIvMzAgQ2hlY2tpbmcgY29tbWl0IGJmOTM4Yjc1ZGMxMiAodGFyZ2V0L2F2cjog
SW50cm9kdWNlIGJhc2ljIENQVSBjbGFzcyBvYmplY3QpCldBUk5JTkc6IGFkZGVkLCBtb3ZlZCBv
ciBkZWxldGVkIGZpbGUocyksIGRvZXMgTUFJTlRBSU5FUlMgbmVlZCB1cGRhdGluZz8KIzI1OiAK
bmV3IGZpbGUgbW9kZSAxMDA2NDQKCnRvdGFsOiAwIGVycm9ycywgMSB3YXJuaW5ncywgNDEyIGxp
bmVzIGNoZWNrZWQKClBhdGNoIDIvMzAgaGFzIHN0eWxlIHByb2JsZW1zLCBwbGVhc2UgcmV2aWV3
LiAgSWYgYW55IG9mIHRoZXNlIGVycm9ycwphcmUgZmFsc2UgcG9zaXRpdmVzIHJlcG9ydCB0aGVt
IHRvIHRoZSBtYWludGFpbmVyLCBzZWUKQ0hFQ0tQQVRDSCBpbiBNQUlOVEFJTkVSUy4KMy8zMCBD
aGVja2luZyBjb21taXQgMDc1OGNhMTA2Y2M0ICh0YXJnZXQvYXZyOiBDUFUgY2xhc3M6IEFkZCBp
bnRlcnJ1cHQgaGFuZGxpbmcgc3VwcG9ydCkKV0FSTklORzogYWRkZWQsIG1vdmVkIG9yIGRlbGV0
ZWQgZmlsZShzKSwgZG9lcyBNQUlOVEFJTkVSUyBuZWVkIHVwZGF0aW5nPwojMzc6IApuZXcgZmls
ZSBtb2RlIDEwMDY0NAoKdG90YWw6IDAgZXJyb3JzLCAxIHdhcm5pbmdzLCA5NyBsaW5lcyBjaGVj
a2VkCgpQYXRjaCAzLzMwIGhhcyBzdHlsZSBwcm9ibGVtcywgcGxlYXNlIHJldmlldy4gIElmIGFu
eSBvZiB0aGVzZSBlcnJvcnMKYXJlIGZhbHNlIHBvc2l0aXZlcyByZXBvcnQgdGhlbSB0byB0aGUg
bWFpbnRhaW5lciwgc2VlCkNIRUNLUEFUQ0ggaW4gTUFJTlRBSU5FUlMuCjQvMzAgQ2hlY2tpbmcg
Y29tbWl0IGNiNzIxNjlkNDg4MSAodGFyZ2V0L2F2cjogQ1BVIGNsYXNzOiBBZGQgbWVtb3J5IG1l
bmFnZW1lbnQgc3VwcG9ydCkKNS8zMCBDaGVja2luZyBjb21taXQgM2M3ODhjN2Y3YjQ2ICh0YXJn
ZXQvYXZyOiBDUFUgY2xhc3M6IEFkZCBtaWdyYXRpb24gc3VwcG9ydCkKV0FSTklORzogYWRkZWQs
IG1vdmVkIG9yIGRlbGV0ZWQgZmlsZShzKSwgZG9lcyBNQUlOVEFJTkVSUyBuZWVkIHVwZGF0aW5n
PwojNDg6IApuZXcgZmlsZSBtb2RlIDEwMDY0NAoKdG90YWw6IDAgZXJyb3JzLCAxIHdhcm5pbmdz
LCAxMzYgbGluZXMgY2hlY2tlZAoKUGF0Y2ggNS8zMCBoYXMgc3R5bGUgcHJvYmxlbXMsIHBsZWFz
ZSByZXZpZXcuICBJZiBhbnkgb2YgdGhlc2UgZXJyb3JzCmFyZSBmYWxzZSBwb3NpdGl2ZXMgcmVw
b3J0IHRoZW0gdG8gdGhlIG1haW50YWluZXIsIHNlZQpDSEVDS1BBVENIIGluIE1BSU5UQUlORVJT
Lgo2LzMwIENoZWNraW5nIGNvbW1pdCAxZmQ4MmQ0N2Y1YTcgKHRhcmdldC9hdnI6IENQVSBjbGFz
czogQWRkIEdEQiBzdXBwb3J0KQpXQVJOSU5HOiBhZGRlZCwgbW92ZWQgb3IgZGVsZXRlZCBmaWxl
KHMpLCBkb2VzIE1BSU5UQUlORVJTIG5lZWQgdXBkYXRpbmc/CiMzNzogCm5ldyBmaWxlIG1vZGUg
MTAwNjQ0Cgp0b3RhbDogMCBlcnJvcnMsIDEgd2FybmluZ3MsIDE1NiBsaW5lcyBjaGVja2VkCgpQ
YXRjaCA2LzMwIGhhcyBzdHlsZSBwcm9ibGVtcywgcGxlYXNlIHJldmlldy4gIElmIGFueSBvZiB0
aGVzZSBlcnJvcnMKYXJlIGZhbHNlIHBvc2l0aXZlcyByZXBvcnQgdGhlbSB0byB0aGUgbWFpbnRh
aW5lciwgc2VlCkNIRUNLUEFUQ0ggaW4gTUFJTlRBSU5FUlMuCjcvMzAgQ2hlY2tpbmcgY29tbWl0
IDljN2U2NzU3MTMzNyAodGFyZ2V0L2F2cjogSW50cm9kdWNlIGVudW1lcmF0aW9uIEFWUkZlYXR1
cmUpCjgvMzAgQ2hlY2tpbmcgY29tbWl0IDc0MDg5YzkwNGQxNSAodGFyZ2V0L2F2cjogQWRkIGRl
ZmludGlvbnMgb2YgQVZSIGNvcmUgdHlwZXMpCjkvMzAgQ2hlY2tpbmcgY29tbWl0IGI2MWI1MTRj
Mzk5NyAodGFyZ2V0L2F2cjogQWRkIGluc3RydWN0aW9uIGhlbHBlcnMpCldBUk5JTkc6IGFkZGVk
LCBtb3ZlZCBvciBkZWxldGVkIGZpbGUocyksIGRvZXMgTUFJTlRBSU5FUlMgbmVlZCB1cGRhdGlu
Zz8KIzIzNTogCm5ldyBmaWxlIG1vZGUgMTAwNjQ0Cgp0b3RhbDogMCBlcnJvcnMsIDEgd2Fybmlu
Z3MsIDIzNSBsaW5lcyBjaGVja2VkCgpQYXRjaCA5LzMwIGhhcyBzdHlsZSBwcm9ibGVtcywgcGxl
YXNlIHJldmlldy4gIElmIGFueSBvZiB0aGVzZSBlcnJvcnMKYXJlIGZhbHNlIHBvc2l0aXZlcyBy
ZXBvcnQgdGhlbSB0byB0aGUgbWFpbnRhaW5lciwgc2VlCkNIRUNLUEFUQ0ggaW4gTUFJTlRBSU5F
UlMuCjEwLzMwIENoZWNraW5nIGNvbW1pdCAyOGE5MWVhZTcxNjkgKHRhcmdldC9hdnI6IEFkZCBp
bnN0cnVjdGlvbiB0cmFuc2xhdGlvbiAtIFJlZ2lzdGVyIGRlZmluaXRpb25zKQpXQVJOSU5HOiBh
ZGRlZCwgbW92ZWQgb3IgZGVsZXRlZCBmaWxlKHMpLCBkb2VzIE1BSU5UQUlORVJTIG5lZWQgdXBk
YXRpbmc/CiMxOTogCm5ldyBmaWxlIG1vZGUgMTAwNjQ0Cgp0b3RhbDogMCBlcnJvcnMsIDEgd2Fy
bmluZ3MsIDE0MyBsaW5lcyBjaGVja2VkCgpQYXRjaCAxMC8zMCBoYXMgc3R5bGUgcHJvYmxlbXMs
IHBsZWFzZSByZXZpZXcuICBJZiBhbnkgb2YgdGhlc2UgZXJyb3JzCmFyZSBmYWxzZSBwb3NpdGl2
ZXMgcmVwb3J0IHRoZW0gdG8gdGhlIG1haW50YWluZXIsIHNlZQpDSEVDS1BBVENIIGluIE1BSU5U
QUlORVJTLgoxMS8zMCBDaGVja2luZyBjb21taXQgMTIwYTk1NjI3NjExICh0YXJnZXQvYXZyOiBB
ZGQgaW5zdHJ1Y3Rpb24gdHJhbnNsYXRpb24gLSBBcml0aG1ldGljIGFuZCBMb2dpYyBJbnN0cnVj
dGlvbnMpCldBUk5JTkc6IGFkZGVkLCBtb3ZlZCBvciBkZWxldGVkIGZpbGUocyksIGRvZXMgTUFJ
TlRBSU5FUlMgbmVlZCB1cGRhdGluZz8KIzI3OiAKbmV3IGZpbGUgbW9kZSAxMDA2NDQKCnRvdGFs
OiAwIGVycm9ycywgMSB3YXJuaW5ncywgOTA4IGxpbmVzIGNoZWNrZWQKClBhdGNoIDExLzMwIGhh
cyBzdHlsZSBwcm9ibGVtcywgcGxlYXNlIHJldmlldy4gIElmIGFueSBvZiB0aGVzZSBlcnJvcnMK
YXJlIGZhbHNlIHBvc2l0aXZlcyByZXBvcnQgdGhlbSB0byB0aGUgbWFpbnRhaW5lciwgc2VlCkNI
RUNLUEFUQ0ggaW4gTUFJTlRBSU5FUlMuCjEyLzMwIENoZWNraW5nIGNvbW1pdCAyMmQ0NjUxNDk4
NzEgKHRhcmdldC9hdnI6IEFkZCBpbnN0cnVjdGlvbiB0cmFuc2xhdGlvbiAtIEJyYW5jaCBJbnN0
cnVjdGlvbnMpCjEzLzMwIENoZWNraW5nIGNvbW1pdCBjZjNkYmZkOTY2MWMgKHRhcmdldC9hdnI6
IEFkZCBpbnN0cnVjdGlvbiB0cmFuc2xhdGlvbiAtIERhdGEgVHJhbnNmZXIgSW5zdHJ1Y3Rpb25z
KQoxNC8zMCBDaGVja2luZyBjb21taXQgZGQyNjI5OTIzOTlmICh0YXJnZXQvYXZyOiBBZGQgaW5z
dHJ1Y3Rpb24gdHJhbnNsYXRpb24gLSBCaXQgYW5kIEJpdC10ZXN0IEluc3RydWN0aW9ucykKMTUv
MzAgQ2hlY2tpbmcgY29tbWl0IDAzYjBiMWVjNzhjMyAodGFyZ2V0L2F2cjogQWRkIGluc3RydWN0
aW9uIHRyYW5zbGF0aW9uIC0gTUNVIENvbnRyb2wgSW5zdHJ1Y3Rpb25zKQoxNi8zMCBDaGVja2lu
ZyBjb21taXQgMzE3OTNmNTViMDZlICh0YXJnZXQvYXZyOiBBZGQgaW5zdHJ1Y3Rpb24gdHJhbnNs
YXRpb24gLSBDUFUgbWFpbiB0cmFuc2xhdGlvbiBmdW5jdGlvbikKMTcvMzAgQ2hlY2tpbmcgY29t
bWl0IGUyYzdhNDc2OWE5NCAodGFyZ2V0L2F2cjogSW5pdGlhbGl6ZSBUQ0cgcmVnaXN0ZXIgdmFy
aWFibGVzKQoxOC8zMCBDaGVja2luZyBjb21taXQgODFlZjhlZmJlYTNjICh0YXJnZXQvYXZyOiBB
ZGQgc3VwcG9ydCBmb3IgZGlzYXNzZW1ibGluZyB2aWEgb3B0aW9uICctZCBpbl9hc20nKQpXQVJO
SU5HOiBhZGRlZCwgbW92ZWQgb3IgZGVsZXRlZCBmaWxlKHMpLCBkb2VzIE1BSU5UQUlORVJTIG5l
ZWQgdXBkYXRpbmc/CiM3MTogCm5ldyBmaWxlIG1vZGUgMTAwNjQ0Cgp0b3RhbDogMCBlcnJvcnMs
IDEgd2FybmluZ3MsIDI3OSBsaW5lcyBjaGVja2VkCgpQYXRjaCAxOC8zMCBoYXMgc3R5bGUgcHJv
YmxlbXMsIHBsZWFzZSByZXZpZXcuICBJZiBhbnkgb2YgdGhlc2UgZXJyb3JzCmFyZSBmYWxzZSBw
b3NpdGl2ZXMgcmVwb3J0IHRoZW0gdG8gdGhlIG1haW50YWluZXIsIHNlZQpDSEVDS1BBVENIIGlu
IE1BSU5UQUlORVJTLgoxOS8zMCBDaGVja2luZyBjb21taXQgM2NiNWUzMTM0OTRlIChody9jaGFy
OiBhdnI6IEFkZCBsaW1pdGVkIHN1cHBvcnQgZm9yIFVTQVJUIHBlcmlwaGVyYWwpCldBUk5JTkc6
IGFkZGVkLCBtb3ZlZCBvciBkZWxldGVkIGZpbGUocyksIGRvZXMgTUFJTlRBSU5FUlMgbmVlZCB1
cGRhdGluZz8KIzY5OiAKbmV3IGZpbGUgbW9kZSAxMDA2NDQKCnRvdGFsOiAwIGVycm9ycywgMSB3
YXJuaW5ncywgNDQyIGxpbmVzIGNoZWNrZWQKClBhdGNoIDE5LzMwIGhhcyBzdHlsZSBwcm9ibGVt
cywgcGxlYXNlIHJldmlldy4gIElmIGFueSBvZiB0aGVzZSBlcnJvcnMKYXJlIGZhbHNlIHBvc2l0
aXZlcyByZXBvcnQgdGhlbSB0byB0aGUgbWFpbnRhaW5lciwgc2VlCkNIRUNLUEFUQ0ggaW4gTUFJ
TlRBSU5FUlMuCjIwLzMwIENoZWNraW5nIGNvbW1pdCBkNjczZTRhNTYzMTkgKGh3L3RpbWVyOiBh
dnI6IEFkZCBsaW1pdGVkIHN1cHBvcnQgZm9yIDE2LWJpdCB0aW1lciBwZXJpcGhlcmFsKQpXQVJO
SU5HOiBhZGRlZCwgbW92ZWQgb3IgZGVsZXRlZCBmaWxlKHMpLCBkb2VzIE1BSU5UQUlORVJTIG5l
ZWQgdXBkYXRpbmc/CiM2MDogCm5ldyBmaWxlIG1vZGUgMTAwNjQ0Cgp0b3RhbDogMCBlcnJvcnMs
IDEgd2FybmluZ3MsIDczNyBsaW5lcyBjaGVja2VkCgpQYXRjaCAyMC8zMCBoYXMgc3R5bGUgcHJv
YmxlbXMsIHBsZWFzZSByZXZpZXcuICBJZiBhbnkgb2YgdGhlc2UgZXJyb3JzCmFyZSBmYWxzZSBw
b3NpdGl2ZXMgcmVwb3J0IHRoZW0gdG8gdGhlIG1haW50YWluZXIsIHNlZQpDSEVDS1BBVENIIGlu
IE1BSU5UQUlORVJTLgoyMS8zMCBDaGVja2luZyBjb21taXQgYTUyM2FhODhiMzRjIChody9taXNj
OiBhdnI6IEFkZCBsaW1pdGVkIHN1cHBvcnQgZm9yIHBvd2VyIHJlZHVjdGlvbiBkZXZpY2UpCldB
Uk5JTkc6IGFkZGVkLCBtb3ZlZCBvciBkZWxldGVkIGZpbGUocyksIGRvZXMgTUFJTlRBSU5FUlMg
bmVlZCB1cGRhdGluZz8KIzU4OiAKbmV3IGZpbGUgbW9kZSAxMDA2NDQKCnRvdGFsOiAwIGVycm9y
cywgMSB3YXJuaW5ncywgMTg5IGxpbmVzIGNoZWNrZWQKClBhdGNoIDIxLzMwIGhhcyBzdHlsZSBw
cm9ibGVtcywgcGxlYXNlIHJldmlldy4gIElmIGFueSBvZiB0aGVzZSBlcnJvcnMKYXJlIGZhbHNl
IHBvc2l0aXZlcyByZXBvcnQgdGhlbSB0byB0aGUgbWFpbnRhaW5lciwgc2VlCkNIRUNLUEFUQ0gg
aW4gTUFJTlRBSU5FUlMuCjIyLzMwIENoZWNraW5nIGNvbW1pdCAxYWU0ZDllM2JiYzMgKHRhcmdl
dC9hdnI6IFJlZ2lzdGVyIEFWUiBzdXBwb3J0IHdpdGggdGhlIHJlc3Qgb2YgUUVNVSkKMjMvMzAg
Q2hlY2tpbmcgY29tbWl0IDQzYjQ3YTE0YzllOSAoaHcvYXZyOiBBZGQgc3VwcG9ydCBmb3IgbG9h
ZGluZyBFTEYvcmF3IGJpbmFyaWVzKQpXQVJOSU5HOiBhZGRlZCwgbW92ZWQgb3IgZGVsZXRlZCBm
aWxlKHMpLCBkb2VzIE1BSU5UQUlORVJTIG5lZWQgdXBkYXRpbmc/CiMzMjogCm5ldyBmaWxlIG1v
ZGUgMTAwNjQ0Cgp0b3RhbDogMCBlcnJvcnMsIDEgd2FybmluZ3MsIDE3MyBsaW5lcyBjaGVja2Vk
CgpQYXRjaCAyMy8zMCBoYXMgc3R5bGUgcHJvYmxlbXMsIHBsZWFzZSByZXZpZXcuICBJZiBhbnkg
b2YgdGhlc2UgZXJyb3JzCmFyZSBmYWxzZSBwb3NpdGl2ZXMgcmVwb3J0IHRoZW0gdG8gdGhlIG1h
aW50YWluZXIsIHNlZQpDSEVDS1BBVENIIGluIE1BSU5UQUlORVJTLgoyNC8zMCBDaGVja2luZyBj
b21taXQgM2QxNjQwZmI4YzFhIChody9hdnI6IEFkZCBzb21lIEFUbWVnYSBtaWNyb2NvbnRyb2xs
ZXJzKQpXQVJOSU5HOiBhZGRlZCwgbW92ZWQgb3IgZGVsZXRlZCBmaWxlKHMpLCBkb2VzIE1BSU5U
QUlORVJTIG5lZWQgdXBkYXRpbmc/CiMzMDogCm5ldyBmaWxlIG1vZGUgMTAwNjQ0Cgp0b3RhbDog
MCBlcnJvcnMsIDEgd2FybmluZ3MsIDUxMyBsaW5lcyBjaGVja2VkCgpQYXRjaCAyNC8zMCBoYXMg
c3R5bGUgcHJvYmxlbXMsIHBsZWFzZSByZXZpZXcuICBJZiBhbnkgb2YgdGhlc2UgZXJyb3JzCmFy
ZSBmYWxzZSBwb3NpdGl2ZXMgcmVwb3J0IHRoZW0gdG8gdGhlIG1haW50YWluZXIsIHNlZQpDSEVD
S1BBVENIIGluIE1BSU5UQUlORVJTLgoyNS8zMCBDaGVja2luZyBjb21taXQgMjlkZDI5Y2UxZGY5
IChody9hdnI6IEFkZCBsaW1pdGVkIHN1cHBvcnQgZm9yIHNvbWUgQXJkdWlubyBib2FyZHMpCldB
Uk5JTkc6IGFkZGVkLCBtb3ZlZCBvciBkZWxldGVkIGZpbGUocyksIGRvZXMgTUFJTlRBSU5FUlMg
bmVlZCB1cGRhdGluZz8KIzgxOiAKbmV3IGZpbGUgbW9kZSAxMDA2NDQKCnRvdGFsOiAwIGVycm9y
cywgMSB3YXJuaW5ncywgMTc4IGxpbmVzIGNoZWNrZWQKClBhdGNoIDI1LzMwIGhhcyBzdHlsZSBw
cm9ibGVtcywgcGxlYXNlIHJldmlldy4gIElmIGFueSBvZiB0aGVzZSBlcnJvcnMKYXJlIGZhbHNl
IHBvc2l0aXZlcyByZXBvcnQgdGhlbSB0byB0aGUgbWFpbnRhaW5lciwgc2VlCkNIRUNLUEFUQ0gg
aW4gTUFJTlRBSU5FUlMuCjI2LzMwIENoZWNraW5nIGNvbW1pdCBiYmExZTM0ZWNiYWEgKHRhcmdl
dC9hdnI6IFVwZGF0ZSBidWlsZCBzeXN0ZW0pCldBUk5JTkc6IGFkZGVkLCBtb3ZlZCBvciBkZWxl
dGVkIGZpbGUocyksIGRvZXMgTUFJTlRBSU5FUlMgbmVlZCB1cGRhdGluZz8KIzU3OiAKbmV3IGZp
bGUgbW9kZSAxMDA2NDQKCnRvdGFsOiAwIGVycm9ycywgMSB3YXJuaW5ncywgNjUgbGluZXMgY2hl
Y2tlZAoKUGF0Y2ggMjYvMzAgaGFzIHN0eWxlIHByb2JsZW1zLCBwbGVhc2UgcmV2aWV3LiAgSWYg
YW55IG9mIHRoZXNlIGVycm9ycwphcmUgZmFsc2UgcG9zaXRpdmVzIHJlcG9ydCB0aGVtIHRvIHRo
ZSBtYWludGFpbmVyLCBzZWUKQ0hFQ0tQQVRDSCBpbiBNQUlOVEFJTkVSUy4KMjcvMzAgQ2hlY2tp
bmcgY29tbWl0IGQ1ZTQ2OTk1MWNmNiAodGVzdHMvbWFjaGluZS1ub25lOiBBZGQgQVZSIHN1cHBv
cnQpCjI4LzMwIENoZWNraW5nIGNvbW1pdCBiNTY0NjgyYjYzMzkgKHRlc3RzL2Jvb3Qtc2VyaWFs
OiBUZXN0IHNvbWUgQXJkdWlubyBib2FyZHMgKEFWUiBiYXNlZCkpCjI5LzMwIENoZWNraW5nIGNv
bW1pdCA4ODU3NjE1M2Y2MzkgKHRlc3RzL2FjY2VwdGFuY2U6IFRlc3QgdGhlIEFyZHVpbm8gTUVH
QTI1NjAgYm9hcmQpCldBUk5JTkc6IGFkZGVkLCBtb3ZlZCBvciBkZWxldGVkIGZpbGUocyksIGRv
ZXMgTUFJTlRBSU5FUlMgbmVlZCB1cGRhdGluZz8KIzQ2OiAKbmV3IGZpbGUgbW9kZSAxMDA2NDQK
CnRvdGFsOiAwIGVycm9ycywgMSB3YXJuaW5ncywgNTcgbGluZXMgY2hlY2tlZAoKUGF0Y2ggMjkv
MzAgaGFzIHN0eWxlIHByb2JsZW1zLCBwbGVhc2UgcmV2aWV3LiAgSWYgYW55IG9mIHRoZXNlIGVy
cm9ycwphcmUgZmFsc2UgcG9zaXRpdmVzIHJlcG9ydCB0aGVtIHRvIHRoZSBtYWludGFpbmVyLCBz
ZWUKQ0hFQ0tQQVRDSCBpbiBNQUlOVEFJTkVSUy4KMzAvMzAgQ2hlY2tpbmcgY29tbWl0IGZhYWQ3
NzUwNGQ1MCAodGFyZ2V0L2F2cjogQWRkIHNlY3Rpb24gaW50byBRRU1VIGRvY3VtZW50YXRpb24p
CldBUk5JTkc6IGFkZGVkLCBtb3ZlZCBvciBkZWxldGVkIGZpbGUocyksIGRvZXMgTUFJTlRBSU5F
UlMgbmVlZCB1cGRhdGluZz8KIzE1OiAKbmV3IGZpbGUgbW9kZSAxMDA2NDQKCkVSUk9SOiB0cmFp
bGluZyB3aGl0ZXNwYWNlCiMzOTogRklMRTogZG9jcy9zeXN0ZW0vdGFyZ2V0LWF2ci5yc3Q6MjA6
CisgLSBDb250aW51b3VzIG5vbiBpbnRlcnJ1cHRlZCBleGVjdXRpb246ICQKCnRvdGFsOiAxIGVy
cm9ycywgMSB3YXJuaW5ncywgNDEgbGluZXMgY2hlY2tlZAoKUGF0Y2ggMzAvMzAgaGFzIHN0eWxl
IHByb2JsZW1zLCBwbGVhc2UgcmV2aWV3LiAgSWYgYW55IG9mIHRoZXNlIGVycm9ycwphcmUgZmFs
c2UgcG9zaXRpdmVzIHJlcG9ydCB0aGVtIHRvIHRoZSBtYWludGFpbmVyLCBzZWUKQ0hFQ0tQQVRD
SCBpbiBNQUlOVEFJTkVSUy4KCj09PSBPVVRQVVQgRU5EID09PQoKVGVzdCBjb21tYW5kIGV4aXRl
ZCB3aXRoIGNvZGU6IDEKCgpUaGUgZnVsbCBsb2cgaXMgYXZhaWxhYmxlIGF0Cmh0dHA6Ly9wYXRj
aGV3Lm9yZy9sb2dzLzIwMjAwNzA1MTQwMzE1LjI2MDUxNC0xLWh1dGhAdHV4ZmFtaWx5Lm9yZy90
ZXN0aW5nLmNoZWNrcGF0Y2gvP3R5cGU9bWVzc2FnZS4KLS0tCkVtYWlsIGdlbmVyYXRlZCBhdXRv
bWF0aWNhbGx5IGJ5IFBhdGNoZXcgW2h0dHBzOi8vcGF0Y2hldy5vcmcvXS4KUGxlYXNlIHNlbmQg
eW91ciBmZWVkYmFjayB0byBwYXRjaGV3LWRldmVsQHJlZGhhdC5jb20=

