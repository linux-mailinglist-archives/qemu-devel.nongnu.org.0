Return-Path: <qemu-devel-bounces+lists+qemu-devel=lfdr.de@nongnu.org>
X-Original-To: lists+qemu-devel@lfdr.de
Delivered-To: lists+qemu-devel@lfdr.de
Received: from lists.gnu.org (lists.gnu.org [209.51.188.17])
	by mail.lfdr.de (Postfix) with ESMTPS id 0BB1A15872F
	for <lists+qemu-devel@lfdr.de>; Tue, 11 Feb 2020 02:02:17 +0100 (CET)
Received: from localhost ([::1]:41830 helo=lists1p.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.90_1)
	(envelope-from <qemu-devel-bounces+lists+qemu-devel=lfdr.de@nongnu.org>)
	id 1j1JwO-0008DN-2c
	for lists+qemu-devel@lfdr.de; Mon, 10 Feb 2020 20:02:16 -0500
Received: from eggs.gnu.org ([2001:470:142:3::10]:33684)
 by lists.gnu.org with esmtp (Exim 4.90_1)
 (envelope-from <tsimpson@qualcomm.com>) id 1j1Jcg-0002E5-8X
 for qemu-devel@nongnu.org; Mon, 10 Feb 2020 19:41:56 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
 (envelope-from <tsimpson@qualcomm.com>) id 1j1Jce-0000yg-4m
 for qemu-devel@nongnu.org; Mon, 10 Feb 2020 19:41:54 -0500
Received: from alexa-out-sd-01.qualcomm.com ([199.106.114.38]:3651)
 by eggs.gnu.org with esmtps (TLS1.0:RSA_AES_256_CBC_SHA1:32)
 (Exim 4.71) (envelope-from <tsimpson@qualcomm.com>)
 id 1j1Jcd-0004uE-LH
 for qemu-devel@nongnu.org; Mon, 10 Feb 2020 19:41:52 -0500
DKIM-Signature: v=1; a=rsa-sha256; c=simple/simple;
 d=quicinc.com; i=@quicinc.com; q=dns/txt; s=qcdkim;
 t=1581381711; x=1612917711;
 h=from:to:cc:subject:date:message-id:in-reply-to:
 references:mime-version:content-transfer-encoding;
 bh=ehQe6+VtIsCZ744sBLi9DIVbEpq6hL5iOsmAI8cGWNk=;
 b=GCTBm/uH8BMurgaPCFGJ+TgB2vnIPOJkgF+D8FCzD076UDVyFvjb/sjs
 uwy3mtrr/k5Om9WC2wUasL5X4ZFySKxexgY2zdRq02JXVJGs4yNXLGDA6
 RPBwJ5pYDlJCzdAPHVaem+0RvPG/J1/Z1TnluWx2Y9xS9JxjbwnMtk36f k=;
Received: from unknown (HELO ironmsg03-sd.qualcomm.com) ([10.53.140.143])
 by alexa-out-sd-01.qualcomm.com with ESMTP; 10 Feb 2020 16:41:03 -0800
Received: from vu-tsimpson-aus.qualcomm.com (HELO
 vu-tsimpson1-aus.qualcomm.com) ([10.222.150.1])
 by ironmsg03-sd.qualcomm.com with ESMTP; 10 Feb 2020 16:41:02 -0800
Received: by vu-tsimpson1-aus.qualcomm.com (Postfix, from userid 47164)
 id 9671A1B48; Mon, 10 Feb 2020 18:41:02 -0600 (CST)
From: Taylor Simpson <tsimpson@quicinc.com>
To: qemu-devel@nongnu.org
Subject: [RFC PATCH 53/66] Hexagon - Add Hexagon Vector eXtensions (HVX) to
 core definition
Date: Mon, 10 Feb 2020 18:40:31 -0600
Message-Id: <1581381644-13678-54-git-send-email-tsimpson@quicinc.com>
X-Mailer: git-send-email 2.7.4
In-Reply-To: <1581381644-13678-1-git-send-email-tsimpson@quicinc.com>
References: <1581381644-13678-1-git-send-email-tsimpson@quicinc.com>
MIME-Version: 1.0
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: base64
X-detected-operating-system: by eggs.gnu.org: FreeBSD 9.x [fuzzy]
X-Received-From: 199.106.114.38
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.23
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
 <mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <https://lists.nongnu.org/archive/html/qemu-devel>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
 <mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: riku.voipio@iki.fi, richard.henderson@linaro.org, laurent@vivier.eu,
 Taylor Simpson <tsimpson@quicinc.com>, philmd@redhat.com,
 aleksandar.m.mail@gmail.com
Errors-To: qemu-devel-bounces+lists+qemu-devel=lfdr.de@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+lists+qemu-devel=lfdr.de@nongnu.org>

SFZYIGlzIGEgc2V0IG9mIHdpZGUgdmVjdG9yIGluc3RydWN0aW9ucy4gIE1hY2hpbmUgc3RhdGUg
aW5jbHVkZXMKICAgIHZlY3RvciByZWdpc3RlcnMgKFZSZWdzKQogICAgdmVjdG9yIHByZWRpY2F0
ZSByZWdpc3RlcnMgKFFSZWdzKQogICAgdGVtcG9yYXJ5IHJlZ2lzdGVycyBmb3IgcGFja2V0IHNl
bWFudGljcwogICAgc3RvcmUgYnVmZmVyIChtYXNrZWQgc3RvcmVzIGFuZCBzY2F0dGVyL2dhdGhl
cikKClNpZ25lZC1vZmYtYnk6IFRheWxvciBTaW1wc29uIDx0c2ltcHNvbkBxdWljaW5jLmNvbT4K
LS0tCiB0YXJnZXQvaGV4YWdvbi9jcHUuYyAgICAgICAgIHwgNTEgKysrKysrKysrKysrKysrKysr
KysrKysrKy0KIHRhcmdldC9oZXhhZ29uL2NwdS5oICAgICAgICAgfCA0MiArKysrKysrKysrKysr
KysrKysrKysKIHRhcmdldC9oZXhhZ29uL2luc24uaCAgICAgICAgfCAxNiArKysrKysrKwogdGFy
Z2V0L2hleGFnb24vaW50ZXJuYWwuaCAgICB8ICAyICsKIHRhcmdldC9oZXhhZ29uL21tdmVjL21t
dmVjLmggfCA4NyArKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKwog
NSBmaWxlcyBjaGFuZ2VkLCAxOTcgaW5zZXJ0aW9ucygrKSwgMSBkZWxldGlvbigtKQogY3JlYXRl
IG1vZGUgMTAwNjQ0IHRhcmdldC9oZXhhZ29uL21tdmVjL21tdmVjLmgKCmRpZmYgLS1naXQgYS90
YXJnZXQvaGV4YWdvbi9jcHUuYyBiL3RhcmdldC9oZXhhZ29uL2NwdS5jCmluZGV4IDI2YmY5ODcu
LmUxNDlhNzkgMTAwNjQ0Ci0tLSBhL3RhcmdldC9oZXhhZ29uL2NwdS5jCisrKyBiL3RhcmdldC9o
ZXhhZ29uL2NwdS5jCkBAIC0xMDQsNiArMTA0LDM5IEBAIHN0YXRpYyB2b2lkIHByaW50X3JlZyhG
SUxFICpmLCBDUFVIZXhhZ29uU3RhdGUgKmVudiwgaW50IHJlZ251bSkKICAgICAgICAgICAgICAg
ICAgICAgOiBlbnYtPmdwcltyZWdudW1dKTsKIH0KIAorc3RhdGljIHZvaWQgcHJpbnRfdnJlZyhG
SUxFICpmLCBDUFVIZXhhZ29uU3RhdGUgKmVudiwgaW50IHJlZ251bSkKK3sKKyAgICBpbnQgaTsK
KyAgICBmcHJpbnRmKGYsICIgIHYlZCA9ICgiLCByZWdudW0pOworICAgIGZwcmludGYoZiwgIjB4
JTAyeCIsIGVudi0+VlJlZ3NbcmVnbnVtXS51YltNQVhfVkVDX1NJWkVfQllURVMgLSAxXSk7Cisg
ICAgZm9yIChpID0gTUFYX1ZFQ19TSVpFX0JZVEVTIC0gMjsgaSA+PSAwOyBpLS0pIHsKKyAgICAg
ICAgZnByaW50ZihmLCAiLCAweCUwMngiLCBlbnYtPlZSZWdzW3JlZ251bV0udWJbaV0pOworICAg
IH0KKyAgICBmcHJpbnRmKGYsICIpXG4iKTsKK30KKwordm9pZCBoZXhhZ29uX2RlYnVnX3ZyZWco
Q1BVSGV4YWdvblN0YXRlICplbnYsIGludCByZWdudW0pCit7CisgICAgcHJpbnRfdnJlZyhzdGRv
dXQsIGVudiwgcmVnbnVtKTsKK30KKworc3RhdGljIHZvaWQgcHJpbnRfcXJlZyhGSUxFICpmLCBD
UFVIZXhhZ29uU3RhdGUgKmVudiwgaW50IHJlZ251bSkKK3sKKyAgICBpbnQgaTsKKyAgICBmcHJp
bnRmKGYsICIgIHElZCA9ICgiLCByZWdudW0pOworICAgIGZwcmludGYoZiwgIiwgMHglMDJ4IiwK
KyAgICAgICAgICAgICAgICBlbnYtPlFSZWdzW3JlZ251bV0udWJbTUFYX1ZFQ19TSVpFX0JZVEVT
IC8gOCAtIDFdKTsKKyAgICBmb3IgKGkgPSBNQVhfVkVDX1NJWkVfQllURVMgLyA4IC0gMjsgaSA+
PSAwOyBpLS0pIHsKKyAgICAgICAgZnByaW50ZihmLCAiLCAweCUwMngiLCBlbnYtPlFSZWdzW3Jl
Z251bV0udWJbaV0pOworICAgIH0KKyAgICBmcHJpbnRmKGYsICIpXG4iKTsKK30KKwordm9pZCBo
ZXhhZ29uX2RlYnVnX3FyZWcoQ1BVSGV4YWdvblN0YXRlICplbnYsIGludCByZWdudW0pCit7Cisg
ICAgcHJpbnRfcXJlZyhzdGRvdXQsIGVudiwgcmVnbnVtKTsKK30KKwogc3RhdGljIHZvaWQgaGV4
YWdvbl9kdW1wKENQVUhleGFnb25TdGF0ZSAqZW52LCBGSUxFICpmKQogewogICAgIHN0YXRpYyB0
YXJnZXRfdWxvbmcgbGFzdF9wYzsKQEAgLTE0OCw2ICsxODEsMjIgQEAgc3RhdGljIHZvaWQgaGV4
YWdvbl9kdW1wKENQVUhleGFnb25TdGF0ZSAqZW52LCBGSUxFICpmKQogICAgIHByaW50X3JlZyhm
LCBlbnYsIEhFWF9SRUdfQ1MxKTsKICNlbmRpZgogICAgIGZwcmludGYoZiwgIn1cbiIpOworCisv
KgorICogVGhlIEhWWCByZWdpc3RlciBkdW1wIHRha2VzIHVwIGEgdG9uIG9mIHNwYWNlIGluIHRo
ZSBsb2cKKyAqIERvbid0IHByaW50IGl0IHVubGVzcyBpdCBpcyBuZWVkZWQKKyAqLworI2RlZmlu
ZSBEVU1QX0hWWCAwCisjaWYgRFVNUF9IVlgKKyAgICBmcHJpbnRmKGYsICJWZWN0b3IgUmVnaXN0
ZXJzID0ge1xuIik7CisgICAgZm9yIChpID0gMDsgaSA8IE5VTV9WUkVHUzsgaSsrKSB7CisgICAg
ICAgIHByaW50X3ZyZWcoZiwgZW52LCBpKTsKKyAgICB9CisgICAgZm9yIChpID0gMDsgaSA8IE5V
TV9RUkVHUzsgaSsrKSB7CisgICAgICAgIHByaW50X3FyZWcoZiwgZW52LCBpKTsKKyAgICB9Cisg
ICAgZnByaW50ZihmLCAifVxuIik7CisjZW5kaWYKIH0KIAogc3RhdGljIHZvaWQgaGV4YWdvbl9k
dW1wX3N0YXRlKENQVVN0YXRlICpjcywgRklMRSAqZiwgaW50IGZsYWdzKQpAQCAtMjczLDcgKzMy
Miw3IEBAIHN0YXRpYyB2b2lkIGhleGFnb25fY3B1X2NsYXNzX2luaXQoT2JqZWN0Q2xhc3MgKmMs
IHZvaWQgKmRhdGEpCiAgICAgY2MtPmdkYl9jb3JlX3htbF9maWxlID0gImhleGFnb24tY29yZS54
bWwiOwogICAgIGNjLT5nZGJfcmVhZF9yZWdpc3RlciA9IGhleGFnb25fZ2RiX3JlYWRfcmVnaXN0
ZXI7CiAgICAgY2MtPmdkYl93cml0ZV9yZWdpc3RlciA9IGhleGFnb25fZ2RiX3dyaXRlX3JlZ2lz
dGVyOwotICAgIGNjLT5nZGJfbnVtX2NvcmVfcmVncyA9IFRPVEFMX1BFUl9USFJFQURfUkVHUzsK
KyAgICBjYy0+Z2RiX251bV9jb3JlX3JlZ3MgPSBUT1RBTF9QRVJfVEhSRUFEX1JFR1MgKyBOVU1f
VlJFR1MgKyBOVU1fUVJFR1M7CiAgICAgY2MtPmdkYl9zdG9wX2JlZm9yZV93YXRjaHBvaW50ID0g
dHJ1ZTsKICAgICBjYy0+ZGlzYXNfc2V0X2luZm8gPSBoZXhhZ29uX2NwdV9kaXNhc19zZXRfaW5m
bzsKICNpZmRlZiBDT05GSUdfVENHCmRpZmYgLS1naXQgYS90YXJnZXQvaGV4YWdvbi9jcHUuaCBi
L3RhcmdldC9oZXhhZ29uL2NwdS5oCmluZGV4IGJiM2ZjZDUuLjMyMTdiYTIgMTAwNjQ0Ci0tLSBh
L3RhcmdldC9oZXhhZ29uL2NwdS5oCisrKyBiL3RhcmdldC9oZXhhZ29uL2NwdS5oCkBAIC0zMCw2
ICszMCw3IEBAIHR5cGVkZWYgc3RydWN0IENQVUhleGFnb25TdGF0ZSBDUFVIZXhhZ29uU3RhdGU7
CiAjaW5jbHVkZSAicWVtdS1jb21tb24uaCIKICNpbmNsdWRlICJleGVjL2NwdS1kZWZzLmgiCiAj
aW5jbHVkZSAiaGV4X3JlZ3MuaCIKKyNpbmNsdWRlICJtbXZlYy9tbXZlYy5oIgogCiAjZGVmaW5l
IE5VTV9QUkVHUyA0CiAjaWZkZWYgQ09ORklHX1VTRVJfT05MWQpAQCAtNDIsNiArNDMsNyBAQCB0
eXBlZGVmIHN0cnVjdCBDUFVIZXhhZ29uU3RhdGUgQ1BVSGV4YWdvblN0YXRlOwogI2RlZmluZSBT
VE9SRVNfTUFYIDIKICNkZWZpbmUgUkVHX1dSSVRFU19NQVggMzIKICNkZWZpbmUgUFJFRF9XUklU
RVNfTUFYIDUgICAgICAgICAgICAgICAgICAgLyogNCBpbnNucyArIGVuZGxvb3AgKi8KKyNkZWZp
bmUgVlNUT1JFU19NQVggMgogCiAjZGVmaW5lIFRZUEVfSEVYQUdPTl9DUFUgImhleGFnb24tY3B1
IgogCkBAIC02MCw2ICs2MiwxOSBAQCBzdHJ1Y3QgTWVtTG9nIHsKICAgICB1aW50NjRfdCBkYXRh
NjQ7CiB9OwogCit0eXBlZGVmIHN0cnVjdCB7CisgICAgdGFyZ2V0X3Vsb25nIHZhOworICAgIGlu
dCBzaXplOworICAgIG1tdmVjdG9yX3QgbWFzazsKKyAgICBtbXZlY3Rvcl90IGRhdGE7Cit9IHZz
dG9yZWxvZ190OworCit0eXBlZGVmIHN0cnVjdCB7CisgICAgdW5zaWduZWQgY2hhciBjZGF0YVsy
NTZdOworICAgIHVpbnQzMl90IHJhbmdlOworICAgIHVpbnQ4X3QgZm9ybWF0OworfSBtZW1fYWNj
ZXNzX2luZm9fdDsKKwogI2RlZmluZSBFWEVDX1NUQVRVU19PSyAgICAgICAgICAweDAwMDAKICNk
ZWZpbmUgRVhFQ19TVEFUVVNfU1RPUCAgICAgICAgMHgwMDAyCiAjZGVmaW5lIEVYRUNfU1RBVFVT
X1JFUExBWSAgICAgIDB4MDAxMApAQCAtNzIsNiArODcsOSBAQCBzdHJ1Y3QgTWVtTG9nIHsKICNk
ZWZpbmUgQ0xFQVJfRVhDRVBUSU9OICAgICAgICAgKGVudi0+c3RhdHVzICY9ICh+RVhFQ19TVEFU
VVNfRVhDRVBUSU9OKSkKICNkZWZpbmUgU0VUX0VYQ0VQVElPTiAgICAgICAgICAgKGVudi0+c3Rh
dHVzIHw9IEVYRUNfU1RBVFVTX0VYQ0VQVElPTikKIAorLyogVGhpcyBuZWVkcyB0byBiZSBsYXJn
ZSBlbm91Z2ggZm9yIGFsbCB0aGUgcmVhZHMgYW5kIHdyaXRlcyBpbiBhIHBhY2tldCAqLworI2Rl
ZmluZSBURU1QX1ZFQ1RPUlNfTUFYICAgICAgICAyNQorCiBzdHJ1Y3QgQ1BVSGV4YWdvblN0YXRl
IHsKICAgICB0YXJnZXRfdWxvbmcgZ3ByW1RPVEFMX1BFUl9USFJFQURfUkVHU107CiAgICAgdGFy
Z2V0X3Vsb25nIHByZWRbTlVNX1BSRUdTXTsKQEAgLTExMCw2ICsxMjgsMzAgQEAgc3RydWN0IENQ
VUhleGFnb25TdGF0ZSB7CiAKICAgICB0YXJnZXRfdWxvbmcgaXNfZ2F0aGVyX3N0b3JlX2luc247
CiAgICAgdGFyZ2V0X3Vsb25nIGdhdGhlcl9pc3N1ZWQ7CisKKyAgICBtbXZlY3Rvcl90IFZSZWdz
W05VTV9WUkVHU107CisgICAgbW12ZWN0b3JfdCBmdXR1cmVfVlJlZ3NbTlVNX1ZSRUdTXTsKKyAg
ICBtbXZlY3Rvcl90IHRtcF9WUmVnc1tOVU1fVlJFR1NdOworCisgICAgVlJlZ01hc2sgVlJlZ3Nf
dXBkYXRlZF90bXA7CisgICAgVlJlZ01hc2sgVlJlZ3NfdXBkYXRlZDsKKyAgICBWUmVnTWFzayBW
UmVnc19zZWxlY3Q7CisKKyAgICBtbXFyZWdfdCBRUmVnc1tOVU1fUVJFR1NdOworICAgIG1tcXJl
Z190IGZ1dHVyZV9RUmVnc1tOVU1fUVJFR1NdOworICAgIFFSZWdNYXNrIFFSZWdzX3VwZGF0ZWQ7
CisKKyAgICB2c3RvcmVsb2dfdCB2c3RvcmVbVlNUT1JFU19NQVhdOworICAgIHVpbnQ4X3Qgc3Rv
cmVfcGVuZGluZ1tWU1RPUkVTX01BWF07CisgICAgdWludDhfdCB2c3RvcmVfcGVuZGluZ1tWU1RP
UkVTX01BWF07CisgICAgdWludDhfdCB2dGNtX3BlbmRpbmc7CisgICAgdnRjbV9zdG9yZWxvZ190
IHZ0Y21fbG9nOworICAgIG1lbV9hY2Nlc3NfaW5mb190IG1lbV9hY2Nlc3NbU0xPVFNfTUFYXTsK
KworICAgIGludCBzdGF0dXM7CisKKyAgICBtbXZlY3Rvcl90IHRlbXBfdnJlZ3NbVEVNUF9WRUNU
T1JTX01BWF07CisgICAgbW1xcmVnX3QgdGVtcF9xcmVnc1tURU1QX1ZFQ1RPUlNfTUFYXTsKIH07
CiAKICNkZWZpbmUgSEVYQUdPTl9DUFVfQ0xBU1Moa2xhc3MpIFwKZGlmZiAtLWdpdCBhL3Rhcmdl
dC9oZXhhZ29uL2luc24uaCBiL3RhcmdldC9oZXhhZ29uL2luc24uaAppbmRleCAxMGJlMTY1Li43
NDU2ZjExIDEwMDY0NAotLS0gYS90YXJnZXQvaGV4YWdvbi9pbnNuLmgKKysrIGIvdGFyZ2V0L2hl
eGFnb24vaW5zbi5oCkBAIC00OSwxMiArNDksMTYgQEAgc3RydWN0IEluc3RydWN0aW9uIHsKICAg
ICBzaXplNHVfdCBpc19kY2ZldGNoOjE7ICAgLyogSGFzIGFuIEFfRENGRVRDSCBhdHRyaWJ1dGUg
Ki8KICAgICBzaXplNHVfdCBpc19sb2FkOjE7ICAgICAgLyogSGFzIEFfTE9BRCBhdHRyaWJ1dGUg
Ki8KICAgICBzaXplNHVfdCBpc19zdG9yZToxOyAgICAgLyogSGFzIEFfU1RPUkUgYXR0cmlidXRl
ICovCisgICAgc2l6ZTR1X3QgaXNfdm1lbV9sZDoxOyAgIC8qIEhhcyBhbiBBX0xPQUQgYW5kIGFu
IEFfVk1FTSBhdHRyaWJ1dGUgKi8KKyAgICBzaXplNHVfdCBpc192bWVtX3N0OjE7ICAgLyogSGFz
IGFuIEFfU1RPUkUgYW5kIGFuIEFfVk1FTSBhdHRyaWJ1dGUgKi8KKyAgICBzaXplNHVfdCBpc19z
Y2F0Z2F0aDoxOyAgLyogSGFzIGFuIEFfQ1ZJX0dBVEhFUiBvciBBX0NWSV9TQ0FUVEVSIGF0dHIg
Ki8KICAgICBzaXplNHVfdCBpc19tZW1vcDoxOyAgICAgLyogSGFzIEFfTUVNT1AgYXR0cmlidXRl
ICovCiAgICAgc2l6ZTR1X3QgaXNfZGVhbGxvYzoxOyAgIC8qIElzIGEgZGVhbGxvYyByZXR1cm4g
b3IgZGVhbGxvYyBmcmFtZSAqLwogICAgIHNpemU0dV90IGlzX2FpYToxOyAgICAgICAvKiBJcyBh
IHBvc3QgaW5jcmVtZW50ICovCiAgICAgc2l6ZTR1X3QgaXNfZW5kbG9vcDoxOyAgIC8qIFRoaXMg
aXMgYW4gZW5kIG9mIGxvb3AgKi8KICAgICBzaXplNHVfdCBpc18ybmRfanVtcDoxOyAgLyogVGhp
cyBpcyB0aGUgc2Vjb25kIGp1bXAgb2YgYSBkdWFsLWp1bXAgcGFja2V0ICovCiAgICAgc2l6ZTR1
X3QgbmV3X3ZhbHVlX3Byb2R1Y2VyX3Nsb3Q6NDsKKyAgICBzaXplNHVfdCBodnhfcmVzb3VyY2U6
ODsKICAgICBzaXplNHNfdCBpbW1lZFtJTU1FRFNfTUFYXTsgICAgLyogaW1tZWRpYXRlIGZpZWxk
ICovCiB9OwogCkBAIC0xMjEsMTAgKzEyNSwyMiBAQCBzdHJ1Y3QgUGFja2V0IHsKIAogICAgIC8q
IE1pc2MgKi8KICAgICBzaXplOHVfdCBudW1fcm9wczo0OyAgICAgICAgICAgIC8qIE51bSByaXNj
IG9wcyBpbiB0aGUgcGFja2V0ICovCisgICAgc2l6ZTh1X3QgcGt0X2hhc192dGNtX2FjY2Vzczox
OyAvKiBJcyBhIHZtZW0gYWNjZXNzIGdvaW5nIHRvIFZUQ00gKi8KICAgICBzaXplOHVfdCBwa3Rf
YWNjZXNzX2NvdW50OjI7ICAgIC8qIElzIGEgdm1lbSBhY2Nlc3MgZ29pbmcgdG8gVlRDTSAqLwog
ICAgIHNpemU4dV90IHBrdF9sZGFjY2Vzc19sMjoyOyAgICAgLyogdm1lbSBsZCBhY2Nlc3MgdG8g
bDIgKi8KICAgICBzaXplOHVfdCBwa3RfbGRhY2Nlc3NfdnRjbToyOyAgIC8qIHZtZW0gbGQgYWNj
ZXNzIHRvIHZ0Y20gKi8KIAorICAgIC8qIENvdW50IHRoZSB0eXBlcyBvZiBIVlggaW5zdHJ1Y3Rp
b25zICovCisgICAgc2l6ZTh1X3QgcGt0X2h2eF92YTo0OworICAgIHNpemU4dV90IHBrdF9odnhf
dng6NDsKKyAgICBzaXplOHVfdCBwa3RfaHZ4X3ZwOjQ7CisgICAgc2l6ZTh1X3QgcGt0X2h2eF92
czo0OworICAgIHNpemU4dV90IHBrdF9odnhfYWxsOjQ7CisgICAgc2l6ZTh1X3QgcGt0X2h2eF9u
b25lOjQ7CisKKyAgICBzaXplOHVfdCBwa3RfaGFzX2h2eDoxOworICAgIHNpemU4dV90IHBrdF9o
YXNfZXh0ZW5zaW9uOjE7CisKICAgICBpbnNuX3QgaW5zbltJTlNUUlVDVElPTlNfTUFYXTsKIH07
CiAKZGlmZiAtLWdpdCBhL3RhcmdldC9oZXhhZ29uL2ludGVybmFsLmggYi90YXJnZXQvaGV4YWdv
bi9pbnRlcm5hbC5oCmluZGV4IDU2ZmIzNzIuLjA2MmY0N2IgMTAwNjQ0Ci0tLSBhL3RhcmdldC9o
ZXhhZ29uL2ludGVybmFsLmgKKysrIGIvdGFyZ2V0L2hleGFnb24vaW50ZXJuYWwuaApAQCAtMzks
NiArMzksOCBAQAogZXh0ZXJuIGludCBoZXhhZ29uX2dkYl9yZWFkX3JlZ2lzdGVyKENQVVN0YXRl
ICpjcHUsIHVpbnQ4X3QgKmJ1ZiwgaW50IHJlZyk7CiBleHRlcm4gaW50IGhleGFnb25fZ2RiX3dy
aXRlX3JlZ2lzdGVyKENQVVN0YXRlICpjcHUsIHVpbnQ4X3QgKmJ1ZiwgaW50IHJlZyk7CiAKK2V4
dGVybiB2b2lkIGhleGFnb25fZGVidWdfdnJlZyhDUFVIZXhhZ29uU3RhdGUgKmVudiwgaW50IHJl
Z251bSk7CitleHRlcm4gdm9pZCBoZXhhZ29uX2RlYnVnX3FyZWcoQ1BVSGV4YWdvblN0YXRlICpl
bnYsIGludCByZWdudW0pOwogZXh0ZXJuIHZvaWQgaGV4YWdvbl9kZWJ1ZyhDUFVIZXhhZ29uU3Rh
dGUgKmVudik7CiAKICNpZiBDT1VOVF9IRVhfSEVMUEVSUwpkaWZmIC0tZ2l0IGEvdGFyZ2V0L2hl
eGFnb24vbW12ZWMvbW12ZWMuaCBiL3RhcmdldC9oZXhhZ29uL21tdmVjL21tdmVjLmgKbmV3IGZp
bGUgbW9kZSAxMDA2NDQKaW5kZXggMDAwMDAwMC4uMTljNjA3ZQotLS0gL2Rldi9udWxsCisrKyBi
L3RhcmdldC9oZXhhZ29uL21tdmVjL21tdmVjLmgKQEAgLTAsMCArMSw4NyBAQAorLyoKKyAqICBD
b3B5cmlnaHQgKGMpIDIwMTkgUXVhbGNvbW0gSW5ub3ZhdGlvbiBDZW50ZXIsIEluYy4gQWxsIFJp
Z2h0cyBSZXNlcnZlZC4KKyAqCisgKiAgVGhpcyBwcm9ncmFtIGlzIGZyZWUgc29mdHdhcmU7IHlv
dSBjYW4gcmVkaXN0cmlidXRlIGl0IGFuZC9vciBtb2RpZnkKKyAqICBpdCB1bmRlciB0aGUgdGVy
bXMgb2YgdGhlIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieQorICog
IHRoZSBGcmVlIFNvZnR3YXJlIEZvdW5kYXRpb247IGVpdGhlciB2ZXJzaW9uIDIgb2YgdGhlIExp
Y2Vuc2UsIG9yCisgKiAgKGF0IHlvdXIgb3B0aW9uKSBhbnkgbGF0ZXIgdmVyc2lvbi4KKyAqCisg
KiAgVGhpcyBwcm9ncmFtIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBi
ZSB1c2VmdWwsCisgKiAgYnV0IFdJVEhPVVQgQU5ZIFdBUlJBTlRZOyB3aXRob3V0IGV2ZW4gdGhl
IGltcGxpZWQgd2FycmFudHkgb2YKKyAqICBNRVJDSEFOVEFCSUxJVFkgb3IgRklUTkVTUyBGT1Ig
QSBQQVJUSUNVTEFSIFBVUlBPU0UuICBTZWUgdGhlCisgKiAgR05VIEdlbmVyYWwgUHVibGljIExp
Y2Vuc2UgZm9yIG1vcmUgZGV0YWlscy4KKyAqCisgKiAgWW91IHNob3VsZCBoYXZlIHJlY2VpdmVk
IGEgY29weSBvZiB0aGUgR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UKKyAqICBhbG9uZyB3aXRo
IHRoaXMgcHJvZ3JhbTsgaWYgbm90LCBzZWUgPGh0dHA6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy8+
LgorICovCisKKyNpZm5kZWYgTU1WRUNfSAorI2RlZmluZSBNTVZFQ19ICisKKyNkZWZpbmUgTUFY
X1ZFQ19TSVpFX0xPR0JZVEVTIDcKKyNkZWZpbmUgTUFYX1ZFQ19TSVpFX0JZVEVTICAoMSA8PCBN
QVhfVkVDX1NJWkVfTE9HQllURVMpCisKKyNkZWZpbmUgTlVNX1ZSRUdTICAgICAgICAgICAzMgor
I2RlZmluZSBOVU1fUVJFR1MgICAgICAgICAgIDQKKwordHlwZWRlZiB1aW50MzJfdCBWUmVnTWFz
azsgLyogYXQgbGVhc3QgTlVNX1ZSRUdTIGJpdHMgKi8KK3R5cGVkZWYgdWludDMyX3QgUVJlZ01h
c2s7IC8qIGF0IGxlYXN0IE5VTV9RUkVHUyBiaXRzICovCisKKyNkZWZpbmUgVkVDVE9SX1NJWkVf
QllURSAgICAoZlZFQ1NJWkUoKSkKKwordHlwZWRlZiB1bmlvbiB7CisgICAgdWludDY0X3QgdWRb
TUFYX1ZFQ19TSVpFX0JZVEVTIC8gOF07CisgICAgaW50NjRfdCAgIGRbTUFYX1ZFQ19TSVpFX0JZ
VEVTIC8gOF07CisgICAgdWludDMyX3QgdXdbTUFYX1ZFQ19TSVpFX0JZVEVTIC8gNF07CisgICAg
aW50MzJfdCAgIHdbTUFYX1ZFQ19TSVpFX0JZVEVTIC8gNF07CisgICAgdWludDE2X3QgdWhbTUFY
X1ZFQ19TSVpFX0JZVEVTIC8gMl07CisgICAgaW50MTZfdCAgIGhbTUFYX1ZFQ19TSVpFX0JZVEVT
IC8gMl07CisgICAgdWludDhfdCAgdWJbTUFYX1ZFQ19TSVpFX0JZVEVTIC8gMV07CisgICAgaW50
OF90ICAgIGJbTUFYX1ZFQ19TSVpFX0JZVEVTIC8gMV07Cit9IG1tdmVjdG9yX3Q7CisKK3R5cGVk
ZWYgdW5pb24geworICAgIHVpbnQ2NF90IHVkWzIgKiBNQVhfVkVDX1NJWkVfQllURVMgLyA4XTsK
KyAgICBpbnQ2NF90ICAgZFsyICogTUFYX1ZFQ19TSVpFX0JZVEVTIC8gOF07CisgICAgdWludDMy
X3QgdXdbMiAqIE1BWF9WRUNfU0laRV9CWVRFUyAvIDRdOworICAgIGludDMyX3QgICB3WzIgKiBN
QVhfVkVDX1NJWkVfQllURVMgLyA0XTsKKyAgICB1aW50MTZfdCB1aFsyICogTUFYX1ZFQ19TSVpF
X0JZVEVTIC8gMl07CisgICAgaW50MTZfdCAgIGhbMiAqIE1BWF9WRUNfU0laRV9CWVRFUyAvIDJd
OworICAgIHVpbnQ4X3QgIHViWzIgKiBNQVhfVkVDX1NJWkVfQllURVMgLyAxXTsKKyAgICBpbnQ4
X3QgICAgYlsyICogTUFYX1ZFQ19TSVpFX0JZVEVTIC8gMV07CisgICAgbW12ZWN0b3JfdCB2WzJd
OworfSBtbXZlY3Rvcl9wYWlyX3Q7CisKK3R5cGVkZWYgdW5pb24geworICAgIHVpbnQ2NF90IHVk
W01BWF9WRUNfU0laRV9CWVRFUyAvIDggLyA4XTsKKyAgICBpbnQ2NF90ICAgZFtNQVhfVkVDX1NJ
WkVfQllURVMgLyA4IC8gOF07CisgICAgdWludDMyX3QgdXdbTUFYX1ZFQ19TSVpFX0JZVEVTIC8g
NCAvIDhdOworICAgIGludDMyX3QgICB3W01BWF9WRUNfU0laRV9CWVRFUyAvIDQgLyA4XTsKKyAg
ICB1aW50MTZfdCB1aFtNQVhfVkVDX1NJWkVfQllURVMgLyAyIC8gOF07CisgICAgaW50MTZfdCAg
IGhbTUFYX1ZFQ19TSVpFX0JZVEVTIC8gMiAvIDhdOworICAgIHVpbnQ4X3QgIHViW01BWF9WRUNf
U0laRV9CWVRFUyAvIDEgLyA4XTsKKyAgICBpbnQ4X3QgICAgYltNQVhfVkVDX1NJWkVfQllURVMg
LyAxIC8gOF07Cit9IG1tcXJlZ190OworCit0eXBlZGVmIHN0cnVjdCB7CisgICAgbW12ZWN0b3Jf
dCBkYXRhOworICAgIG1tdmVjdG9yX3QgbWFzazsKKyAgICBtbXZlY3Rvcl9wYWlyX3Qgb2Zmc2V0
czsKKyAgICBpbnQgc2l6ZTsKKyAgICB0YXJnZXRfdWxvbmcgdmFfYmFzZTsKKyAgICB0YXJnZXRf
dWxvbmcgdmFbTUFYX1ZFQ19TSVpFX0JZVEVTXTsKKyAgICBpbnQgb29iX2FjY2VzczsKKyAgICBp
bnQgb3A7CisgICAgaW50IG9wX3NpemU7Cit9IHZ0Y21fc3RvcmVsb2dfdDsKKworCisvKiBUeXBl
cyBvZiB2ZWN0b3IgcmVnaXN0ZXIgYXNzaWdubWVudCAqLwordHlwZWRlZiBlbnVtIHsKKyAgICBF
WFRfREZMLCAgICAgIC8qIERlZmF1bHQgKi8KKyAgICBFWFRfTkVXLCAgICAgIC8qIE5ldyAtIHZh
bHVlIHVzZWQgaW4gdGhlIHNhbWUgcGFja2V0ICovCisgICAgRVhUX1RNUCAgICAgICAvKiBUZW1w
IC0gdmFsdWUgdXNlZCBidXQgbm90IHN0b3JlZCB0byByZWdpc3RlciAqLworfSB2ZWN0b3JfZHN0
X3R5cGVfdDsKKworI2VuZGlmCisKLS0gCjIuNy40Cgo=

