Return-Path: <qemu-devel-bounces+lists+qemu-devel=lfdr.de@nongnu.org>
X-Original-To: lists+qemu-devel@lfdr.de
Delivered-To: lists+qemu-devel@lfdr.de
Received: from lists.gnu.org (lists.gnu.org [209.51.188.17])
	by mail.lfdr.de (Postfix) with ESMTPS id 457C0248ADC
	for <lists+qemu-devel@lfdr.de>; Tue, 18 Aug 2020 17:59:36 +0200 (CEST)
Received: from localhost ([::1]:34428 helo=lists1p.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.90_1)
	(envelope-from <qemu-devel-bounces+lists+qemu-devel=lfdr.de@nongnu.org>)
	id 1k841P-0004WM-8L
	for lists+qemu-devel@lfdr.de; Tue, 18 Aug 2020 11:59:35 -0400
Received: from eggs.gnu.org ([2001:470:142:3::10]:60614)
 by lists.gnu.org with esmtps (TLS1.2:ECDHE_RSA_AES_256_GCM_SHA384:256)
 (Exim 4.90_1) (envelope-from <tsimpson@qualcomm.com>)
 id 1k83tF-0006VN-8y
 for qemu-devel@nongnu.org; Tue, 18 Aug 2020 11:51:09 -0400
Received: from alexa-out-sd-02.qualcomm.com ([199.106.114.39]:12936)
 by eggs.gnu.org with esmtps (TLS1.2:RSA_AES_256_CBC_SHA1:256)
 (Exim 4.90_1) (envelope-from <tsimpson@qualcomm.com>)
 id 1k83tC-0005rl-59
 for qemu-devel@nongnu.org; Tue, 18 Aug 2020 11:51:08 -0400
DKIM-Signature: v=1; a=rsa-sha256; c=simple/simple;
 d=quicinc.com; i=@quicinc.com; q=dns/txt; s=qcdkim;
 t=1597765866; x=1629301866;
 h=from:to:cc:subject:date:message-id:in-reply-to:
 references:mime-version:content-transfer-encoding;
 bh=ux1k5hYF9qLQLllMcTqCoD+cbXI4RSKWLJ81WLxqDvs=;
 b=ex8/fpHTgBEH1zLJwndsQqPbt8p48G3bdRE37c7BtNQozpZf5pJrUh9l
 jHiN8DfuD5y7CdntMKTTSYkFyJa7EEd9GiQ3mtg3d/vZTqnevlBiaA8TO
 JMs/aZ8Less3JN0K3npfavwHyYAOhg7fOYMXFXpP5PZwIrbfsTdb88Jzo M=;
Received: from unknown (HELO ironmsg04-sd.qualcomm.com) ([10.53.140.144])
 by alexa-out-sd-02.qualcomm.com with ESMTP; 18 Aug 2020 08:50:57 -0700
Received: from vu-tsimpson-aus.qualcomm.com (HELO
 vu-tsimpson1-aus.qualcomm.com) ([10.222.150.1])
 by ironmsg04-sd.qualcomm.com with ESMTP; 18 Aug 2020 08:50:56 -0700
Received: by vu-tsimpson1-aus.qualcomm.com (Postfix, from userid 47164)
 id 3E075848; Tue, 18 Aug 2020 10:50:56 -0500 (CDT)
From: Taylor Simpson <tsimpson@quicinc.com>
To: qemu-devel@nongnu.org
Subject: [RFC PATCH v3 11/34] Hexagon (target/hexagon) register fields
Date: Tue, 18 Aug 2020 10:50:24 -0500
Message-Id: <1597765847-16637-12-git-send-email-tsimpson@quicinc.com>
X-Mailer: git-send-email 2.7.4
In-Reply-To: <1597765847-16637-1-git-send-email-tsimpson@quicinc.com>
References: <1597765847-16637-1-git-send-email-tsimpson@quicinc.com>
MIME-Version: 1.0
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: base64
Received-SPF: pass client-ip=199.106.114.39;
 envelope-from=tsimpson@qualcomm.com; helo=alexa-out-sd-02.qualcomm.com
X-detected-operating-system: by eggs.gnu.org: First seen = 2020/08/18 11:50:57
X-ACL-Warn: Detected OS   = FreeBSD 9.x or newer [fuzzy]
X-Spam_score_int: -32
X-Spam_score: -3.3
X-Spam_bar: ---
X-Spam_report: (-3.3 / 5.0 requ) BAYES_00=-1.9, DKIM_SIGNED=0.1,
 DKIM_VALID=-0.1, DKIM_VALID_AU=-0.1, HEADER_FROM_DIFFERENT_DOMAINS=1,
 RCVD_IN_DNSWL_MED=-2.3, SPF_HELO_NONE=0.001, SPF_PASS=-0.001,
 URIBL_BLOCKED=0.001 autolearn=ham autolearn_force=no
X-Spam_action: no action
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.23
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
 <mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <https://lists.nongnu.org/archive/html/qemu-devel>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
 <mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: ale@rev.ng, riku.voipio@iki.fi, richard.henderson@linaro.org,
 laurent@vivier.eu, tsimpson@quicinc.com, philmd@redhat.com,
 aleksandar.m.mail@gmail.com
Errors-To: qemu-devel-bounces+lists+qemu-devel=lfdr.de@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+lists+qemu-devel=lfdr.de@nongnu.org>

RGVjbGFyZSBiaXRmaWVsZHMgd2l0aGluIHJlZ2lzdGVycyBzdWNoIGFzIHVzZXIgc3RhdHVzIHJl
Z2lzdGVyIChVU1IpCgpTaWduZWQtb2ZmLWJ5OiBUYXlsb3IgU2ltcHNvbiA8dHNpbXBzb25AcXVp
Y2luYy5jb20+Ci0tLQogdGFyZ2V0L2hleGFnb24vcmVnX2ZpZWxkcy5oICAgICB8IDQwICsrKysr
KysrKysrKysrKysrKysrKwogdGFyZ2V0L2hleGFnb24vcmVnX2ZpZWxkc19kZWYuaCB8IDc4ICsr
KysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrCiB0YXJnZXQvaGV4YWdvbi9y
ZWdfZmllbGRzLmMgICAgIHwgMjggKysrKysrKysrKysrKysrCiAzIGZpbGVzIGNoYW5nZWQsIDE0
NiBpbnNlcnRpb25zKCspCiBjcmVhdGUgbW9kZSAxMDA2NDQgdGFyZ2V0L2hleGFnb24vcmVnX2Zp
ZWxkcy5oCiBjcmVhdGUgbW9kZSAxMDA2NDQgdGFyZ2V0L2hleGFnb24vcmVnX2ZpZWxkc19kZWYu
aAogY3JlYXRlIG1vZGUgMTAwNjQ0IHRhcmdldC9oZXhhZ29uL3JlZ19maWVsZHMuYwoKZGlmZiAt
LWdpdCBhL3RhcmdldC9oZXhhZ29uL3JlZ19maWVsZHMuaCBiL3RhcmdldC9oZXhhZ29uL3JlZ19m
aWVsZHMuaApuZXcgZmlsZSBtb2RlIDEwMDY0NAppbmRleCAwMDAwMDAwLi5jZjE2OGYwCi0tLSAv
ZGV2L251bGwKKysrIGIvdGFyZ2V0L2hleGFnb24vcmVnX2ZpZWxkcy5oCkBAIC0wLDAgKzEsNDAg
QEAKKy8qCisgKiAgQ29weXJpZ2h0KGMpIDIwMTktMjAyMCBRdWFsY29tbSBJbm5vdmF0aW9uIENl
bnRlciwgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLgorICoKKyAqICBUaGlzIHByb2dyYW0gaXMg
ZnJlZSBzb2Z0d2FyZTsgeW91IGNhbiByZWRpc3RyaWJ1dGUgaXQgYW5kL29yIG1vZGlmeQorICog
IGl0IHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgYXMg
cHVibGlzaGVkIGJ5CisgKiAgdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbjsgZWl0aGVyIHZl
cnNpb24gMiBvZiB0aGUgTGljZW5zZSwgb3IKKyAqICAoYXQgeW91ciBvcHRpb24pIGFueSBsYXRl
ciB2ZXJzaW9uLgorICoKKyAqICBUaGlzIHByb2dyYW0gaXMgZGlzdHJpYnV0ZWQgaW4gdGhlIGhv
cGUgdGhhdCBpdCB3aWxsIGJlIHVzZWZ1bCwKKyAqICBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7
IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZgorICogIE1FUkNIQU5UQUJJTElU
WSBvciBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRS4gIFNlZSB0aGUKKyAqICBHTlUg
R2VuZXJhbCBQdWJsaWMgTGljZW5zZSBmb3IgbW9yZSBkZXRhaWxzLgorICoKKyAqICBZb3Ugc2hv
dWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5z
ZQorICogIGFsb25nIHdpdGggdGhpcyBwcm9ncmFtOyBpZiBub3QsIHNlZSA8aHR0cDovL3d3dy5n
bnUub3JnL2xpY2Vuc2VzLz4uCisgKi8KKworI2lmbmRlZiBIRVhBR09OX1JFR19GSUVMRFNfSAor
I2RlZmluZSBIRVhBR09OX1JFR19GSUVMRFNfSAorCisjZGVmaW5lIE5VTV9HRU5fUkVHUyAzMgor
Cit0eXBlZGVmIHN0cnVjdCB7CisgICAgY29uc3QgY2hhciAqbmFtZTsKKyAgICBpbnQgb2Zmc2V0
OworICAgIGludCB3aWR0aDsKKyAgICBjb25zdCBjaGFyICpkZXNjcmlwdGlvbjsKK30gcmVnX2Zp
ZWxkX3Q7CisKK2V4dGVybiByZWdfZmllbGRfdCByZWdfZmllbGRfaW5mb1tdOworCitlbnVtIHJl
Z19maWVsZHNfZW51bSB7CisjZGVmaW5lIERFRl9SRUdfRklFTEQoVEFHLCBOQU1FLCBTVEFSVCwg
V0lEVEgsIERFU0NSSVBUSU9OKSBcCisgICAgVEFHLAorI2luY2x1ZGUgInJlZ19maWVsZHNfZGVm
LmgiCisgICAgTlVNX1JFR19GSUVMRFMKKyN1bmRlZiBERUZfUkVHX0ZJRUxECit9OworCisjZW5k
aWYKZGlmZiAtLWdpdCBhL3RhcmdldC9oZXhhZ29uL3JlZ19maWVsZHNfZGVmLmggYi90YXJnZXQv
aGV4YWdvbi9yZWdfZmllbGRzX2RlZi5oCm5ldyBmaWxlIG1vZGUgMTAwNjQ0CmluZGV4IDAwMDAw
MDAuLmZmYjE4YTEKLS0tIC9kZXYvbnVsbAorKysgYi90YXJnZXQvaGV4YWdvbi9yZWdfZmllbGRz
X2RlZi5oCkBAIC0wLDAgKzEsNzggQEAKKy8qCisgKiAgQ29weXJpZ2h0KGMpIDIwMTktMjAyMCBR
dWFsY29tbSBJbm5vdmF0aW9uIENlbnRlciwgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLgorICoK
KyAqICBUaGlzIHByb2dyYW0gaXMgZnJlZSBzb2Z0d2FyZTsgeW91IGNhbiByZWRpc3RyaWJ1dGUg
aXQgYW5kL29yIG1vZGlmeQorICogIGl0IHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgR05VIEdlbmVy
YWwgUHVibGljIExpY2Vuc2UgYXMgcHVibGlzaGVkIGJ5CisgKiAgdGhlIEZyZWUgU29mdHdhcmUg
Rm91bmRhdGlvbjsgZWl0aGVyIHZlcnNpb24gMiBvZiB0aGUgTGljZW5zZSwgb3IKKyAqICAoYXQg
eW91ciBvcHRpb24pIGFueSBsYXRlciB2ZXJzaW9uLgorICoKKyAqICBUaGlzIHByb2dyYW0gaXMg
ZGlzdHJpYnV0ZWQgaW4gdGhlIGhvcGUgdGhhdCBpdCB3aWxsIGJlIHVzZWZ1bCwKKyAqICBidXQg
V0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBv
ZgorICogIE1FUkNIQU5UQUJJTElUWSBvciBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9T
RS4gIFNlZSB0aGUKKyAqICBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBmb3IgbW9yZSBkZXRh
aWxzLgorICoKKyAqICBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUg
R2VuZXJhbCBQdWJsaWMgTGljZW5zZQorICogIGFsb25nIHdpdGggdGhpcyBwcm9ncmFtOyBpZiBu
b3QsIHNlZSA8aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzLz4uCisgKi8KKworLyoKKyAqIEZv
ciByZWdpc3RlcnMgdGhhdCBoYXZlIGluZGl2aWR1YWwgZmllbGRzLCBleHBsYWluIHRoZW0gaGVy
ZQorICogICBERUZfUkVHX0ZJRUxEKHRhZywKKyAqICAgICAgICAgICAgICAgICBuYW1lLAorICog
ICAgICAgICAgICAgICAgIGJpdCBzdGFydCBvZmZzZXQsCisgKiAgICAgICAgICAgICAgICAgd2lk
dGgsCisgKiAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb24KKyAqLworCisvKiBVU1IgZmllbGRz
ICovCitERUZfUkVHX0ZJRUxEKFVTUl9PVkYsCisgICAgIm92ZiIsIDAsIDEsCisgICAgIlN0aWNr
eSBTYXR1cmF0aW9uIE92ZXJmbG93IC0gIgorICAgICJTZXQgd2hlbiBzYXR1cmF0aW9uIG9jY3Vy
cyB3aGlsZSBleGVjdXRpbmcgaW5zdHJ1Y3Rpb24gdGhhdCBzcGVjaWZpZXMgIgorICAgICJvcHRp
b25hbCBzYXR1cmF0aW9uLCByZW1haW5zIHNldCB1bnRpbCBleHBsaWNpdGx5IGNsZWFyZWQgYnkg
YSBVU1I9UnMgIgorICAgICJpbnN0cnVjdGlvbi4iKQorREVGX1JFR19GSUVMRChVU1JfRlBJTlZG
LAorICAgICJmcGludmYiLCAxLCAxLAorICAgICJGbG9hdGluZy1wb2ludCBJRUVFIEludmFsaWQg
U3RpY2t5IEZsYWcuIikKK0RFRl9SRUdfRklFTEQoVVNSX0ZQREJaRiwKKyAgICAiZnBkYnpmIiwg
MiwgMSwKKyAgICAiRmxvYXRpbmctcG9pbnQgSUVFRSBEaXZpZGUtQnktWmVybyBTdGlja3kgRmxh
Zy4iKQorREVGX1JFR19GSUVMRChVU1JfRlBPVkZGLAorICAgICJmcG92ZmYiLCAzLCAxLAorICAg
ICJGbG9hdGluZy1wb2ludCBJRUVFIE92ZXJmbG93IFN0aWNreSBGbGFnLiIpCitERUZfUkVHX0ZJ
RUxEKFVTUl9GUFVORkYsCisgICAgImZwdW5mZiIsIDQsIDEsCisgICAgIkZsb2F0aW5nLXBvaW50
IElFRUUgVW5kZXJmbG93IFN0aWNreSBGbGFnLiIpCitERUZfUkVHX0ZJRUxEKFVTUl9GUElOUEYs
CisgICAgImZwaW5wZiIsIDUsIDEsCisgICAgIkZsb2F0aW5nLXBvaW50IElFRUUgSW5leGFjdCBT
dGlja3kgRmxhZy4iKQorCitERUZfUkVHX0ZJRUxEKFVTUl9MUENGRywKKyAgICAibHBjZmciLCA4
LCAyLAorICAgICJIYXJkd2FyZSBMb29wIENvbmZpZ3VyYXRpb246ICIKKyAgICAiTnVtYmVyIG9m
IGxvb3AgaXRlcmF0aW9ucyAoMC0zKSByZW1haW5pbmcgYmVmb3JlIHBpcGVsaW5lIHByZWRpY2F0
ZSAiCisgICAgInNob3VsZCBiZSBzZXQuIikKKworREVGX1JFR19GSUVMRChVU1JfRlBSTkQsCisg
ICAgImZwcm5kIiwgMjIsIDIsCisgICAgIlJvdW5kaW5nIE1vZGUgZm9yIEZsb2F0aW5nLVBvaW50
IEluc3RydWN0aW9uczogIgorICAgICIwMDogUm91bmQgdG8gbmVhcmVzdCwgdGllcyB0byBldmVu
IChkZWZhdWx0KSwgIgorICAgICIwMTogVG93YXJkIHplcm8sICIKKyAgICAiMTA6IERvd253YXJk
ICh0b3dhcmQgbmVnYXRpdmUgaW5maW5pdHkpLCAiCisgICAgIjExOiBVcHdhcmQgKHRvd2FyZCBw
b3NpdGl2ZSBpbmZpbml0eSkuIikKKworREVGX1JFR19GSUVMRChVU1JfRlBJTlZFLAorICAgICJm
cGludmUiLCAyNSwgMSwKKyAgICAiRW5hYmxlIHRyYXAgb24gSUVFRSBJbnZhbGlkLiIpCitERUZf
UkVHX0ZJRUxEKFVTUl9GUERCWkUsCisgICAgImZwZGJ6ZSIsIDI2LCAxLCAiRW5hYmxlIHRyYXAg
b24gSUVFRSBEaXZpZGUtQnktWmVyby4iKQorREVGX1JFR19GSUVMRChVU1JfRlBPVkZFLAorICAg
ICJmcG92ZmUiLCAyNywgMSwKKyAgICAiRW5hYmxlIHRyYXAgb24gSUVFRSBPdmVyZmxvdy4iKQor
REVGX1JFR19GSUVMRChVU1JfRlBVTkZFLAorICAgICJmcHVuZmUiLCAyOCwgMSwKKyAgICAiRW5h
YmxlIHRyYXAgb24gSUVFRSBVbmRlcmZsb3cuIikKK0RFRl9SRUdfRklFTEQoVVNSX0ZQSU5QRSwK
KyAgICAiZnBpbnBlIiwgMjksIDEsCisgICAgIkVuYWJsZSB0cmFwIG9uIElFRUUgSW5leGFjdC4i
KQorCmRpZmYgLS1naXQgYS90YXJnZXQvaGV4YWdvbi9yZWdfZmllbGRzLmMgYi90YXJnZXQvaGV4
YWdvbi9yZWdfZmllbGRzLmMKbmV3IGZpbGUgbW9kZSAxMDA2NDQKaW5kZXggMDAwMDAwMC4uMmEz
ZTRmNWEKLS0tIC9kZXYvbnVsbAorKysgYi90YXJnZXQvaGV4YWdvbi9yZWdfZmllbGRzLmMKQEAg
LTAsMCArMSwyOCBAQAorLyoKKyAqICBDb3B5cmlnaHQoYykgMjAxOS0yMDIwIFF1YWxjb21tIElu
bm92YXRpb24gQ2VudGVyLCBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuCisgKgorICogIFRoaXMg
cHJvZ3JhbSBpcyBmcmVlIHNvZnR3YXJlOyB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3Ig
bW9kaWZ5CisgKiAgaXQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBHTlUgR2VuZXJhbCBQdWJsaWMg
TGljZW5zZSBhcyBwdWJsaXNoZWQgYnkKKyAqICB0aGUgRnJlZSBTb2Z0d2FyZSBGb3VuZGF0aW9u
OyBlaXRoZXIgdmVyc2lvbiAyIG9mIHRoZSBMaWNlbnNlLCBvcgorICogIChhdCB5b3VyIG9wdGlv
bikgYW55IGxhdGVyIHZlcnNpb24uCisgKgorICogIFRoaXMgcHJvZ3JhbSBpcyBkaXN0cmlidXRl
ZCBpbiB0aGUgaG9wZSB0aGF0IGl0IHdpbGwgYmUgdXNlZnVsLAorICogIGJ1dCBXSVRIT1VUIEFO
WSBXQVJSQU5UWTsgd2l0aG91dCBldmVuIHRoZSBpbXBsaWVkIHdhcnJhbnR5IG9mCisgKiAgTUVS
Q0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiAgU2VlIHRo
ZQorICogIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGZvciBtb3JlIGRldGFpbHMuCisgKgor
ICogIFlvdSBzaG91bGQgaGF2ZSByZWNlaXZlZCBhIGNvcHkgb2YgdGhlIEdOVSBHZW5lcmFsIFB1
YmxpYyBMaWNlbnNlCisgKiAgYWxvbmcgd2l0aCB0aGlzIHByb2dyYW07IGlmIG5vdCwgc2VlIDxo
dHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvPi4KKyAqLworCisjaW5jbHVkZSAicWVtdS9vc2Rl
cC5oIgorI2luY2x1ZGUgInJlZ19maWVsZHMuaCIKKworcmVnX2ZpZWxkX3QgcmVnX2ZpZWxkX2lu
Zm9bXSA9IHsKKyNkZWZpbmUgREVGX1JFR19GSUVMRChUQUcsIE5BTUUsIFNUQVJULCBXSURUSCwg
REVTQ1JJUFRJT04pICAgIFwKKyAgICAgIHtOQU1FLCBTVEFSVCwgV0lEVEgsIERFU0NSSVBUSU9O
fSwKKyNpbmNsdWRlICJyZWdfZmllbGRzX2RlZi5oIgorICAgICAge05VTEwsIDAsIDB9CisjdW5k
ZWYgREVGX1JFR19GSUVMRAorfTsKKwotLSAKMi43LjQKCg==

